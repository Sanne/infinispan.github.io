<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><id>tag:blogger.com,1999:blog-5717179571414330874</id><updated>2017-02-12T06:06:30.058-08:00</updated><category term="release" /><category term="conference" /><category term="event" /><category term="hotrod" /><category term="release candidate" /><category term="infinispan" /><category term="alpha" /><category term="7.0" /><category term="beta" /><category term="8.0" /><category term="presentations" /><category term="final" /><category term="performance" /><category term="5.2" /><category term="4.2" /><category term="5.3" /><category term="cache store" /><category term="devoxx" /><category term="judcon" /><category term="transactions" /><category term="5.1" /><category term="6.0" /><category term="7.2" /><category term="API" /><category term="jsr 107" /><category term="data grids" /><category term="hibernate" /><category term="8.2" /><category term="JUGs" /><category term="community" /><category term="server" /><category term="5.0" /><category term="8.1" /><category term="9.0" /><category term="jbossworld" /><category term="announcement" /><category term="benchmarks" /><category term="configuration" /><category term="state transfer" /><category term="cpp-client" /><category term="eviction" /><category term="javascript" /><category term="jdg" /><category term="jgroups" /><category term="jpa" /><category term="locking" /><category term="map reduce" /><category term="memcached" /><category term="persistence" /><category term="radargun" /><category term="second level cache provider" /><category term="JavaOne" /><category term="c++" /><category term="cdi" /><category term="docker" /><category term="dotnet-client" /><category term="functional" /><category term="jcache" /><category term="lucene" /><category term="marshalling" /><category term="memory" /><category term="query" /><category term="c#" /><category term="concurrency" /><category term="console" /><category term="deadlock detection" /><category term="demo" /><category term="distribution" /><category term="jcp" /><category term="listeners" /><category term="radegast" /><category term="remote events" /><category term="remote query" /><category term="rest" /><category term="spark" /><category term="DSL" /><category term="Protobuf" /><category term="asynchronous" /><category term="cli" /><category term="cloud storage" /><category term="cross site replication" /><category term="csharp" /><category term="gsoc" /><category term="interview" /><category term="jboss cache" /><category term="jclouds" /><category term="js-client" /><category term="jsr 347" /><category term="lambda" /><category term="mongodb" /><category term="monitoring" /><category term="near caching" /><category term="podcast" /><category term="spring" /><category term="standards" /><category term="streams" /><category term="testing" /><category term="video" /><category term="7.1" /><category term="8.1.0" /><category term="Infinispan Query" /><category term="License" /><category term="as7" /><category term="asl2" /><category term="aws" /><category term="book" /><category term="bugfix" /><category term="certification" /><category term="codename" /><category term="data structures" /><category term="data-as-a-service" /><category term="devnation" /><category term="distributed executors" /><category term="domain mode" /><category term="ec2" /><category term="hadoop" /><category term="hibernate search" /><category term="indexing" /><category term="infinispan 8" /><category term="introduction" /><category term="loader" /><category term="maven" /><category term="modules" /><category term="openshift" /><category term="osgi" /><category term="overhead" /><category term="partition handling" /><category term="protostream" /><category term="red hat" /><category term="s3" /><category term="scripting" /><category term="security" /><category term="voxxed" /><category term="4.0" /><category term="Hibernate-Search" /><category term="JP-QL" /><category term="LGPL" /><category term="NoSQL" /><category term="Open Source" /><category term="SCM" /><category term="affinity" /><category term="algorithms" /><category term="amazon" /><category term="annotations" /><category term="archetype" /><category term="as5" /><category term="asymmetric clusters" /><category term="atomic maps" /><category term="atomic objects" /><category term="availability" /><category term="beer" /><category term="berkeleydb" /><category term="blogger" /><category term="buddy replication" /><category term="c3p0" /><category term="cache benchmark framework" /><category term="cachestore" /><category term="cassandra" /><category term="cep" /><category term="codemotion" /><category term="colocation" /><category term="command line interface" /><category term="comparison" /><category term="compose" /><category term="cpu" /><category term="creative" /><category term="custom commands" /><category term="daas" /><category term="data entry" /><category term="database" /><category term="deployment" /><category term="distributed queries" /><category term="documentation" /><category term="dzone refcard" /><category term="ehcache" /><category term="embedded query" /><category term="equivalence" /><category term="externalizers" /><category term="failover" /><category term="faq" /><category term="fine grained" /><category term="flags" /><category term="flink" /><category term="full-text" /><category term="future" /><category term="garbage collection" /><category term="geecon" /><category term="getAll" /><category term="gigaspaces" /><category term="git" /><category term="github" /><category term="grouping and aggregation" /><category term="hackergarten" /><category term="hbase" /><category term="hibernate ogm" /><category term="hql" /><category term="ide" /><category term="index" /><category term="india" /><category term="infoq" /><category term="internationalization" /><category term="interoperability" /><category term="java 8" /><category term="jboss as 5" /><category term="jboss asylum" /><category term="jbug" /><category term="jdbc" /><category term="jopr" /><category term="jta" /><category term="kubernetes" /><category term="language" /><category term="leveldb" /><category term="local mode" /><category term="lock striping" /><category term="logging" /><category term="meetup" /><category term="nashorn" /><category term="netty" /><category term="news" /><category term="off-heap" /><category term="oracle" /><category term="paas" /><category term="partitioning" /><category term="product" /><category term="putAll" /><category term="python" /><category term="quick start" /><category term="recruit" /><category term="redis" /><category term="rehashing" /><category term="remote" /><category term="replication" /><category term="roadmap" /><category term="shell" /><category term="site" /><category term="snowcamp" /><category term="split brain" /><category term="stable" /><category term="statistics" /><category term="store" /><category term="store by reference" /><category term="store by value" /><category term="synchronization" /><category term="syntax highlighting" /><category term="tomcat" /><category term="uneven load" /><category term="user groups" /><category term="user guide" /><category term="vagrant" /><category term="versioning" /><category term="virtual nodes" /><category term="vote" /><category term="wallpaper" /><category term="websocket" /><category term="websockets" /><category term="wildfly" /><category term="xsd" /><category term="xsite" /><category term="yarn" /><title type="text">Infinispan</title><subtitle type="html">Open Source Data Grids</subtitle><link rel="alternate" type="text/html" href="http://blog.infinispan.org/" /><link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" /><author><name>Sanne Grinovero</name><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh4.googleusercontent.com/-WwSuvXDzR0U/AAAAAAAAAAI/AAAAAAAAGgM/8NkVUhcYzSA/s512-c/photo.jpg" /></author><generator version="7.00" uri="http://www.blogger.com">Blogger</generator><openSearch:totalResults>418</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/Infinispan" /><feedburner:info uri="infinispan" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><feedburner:emailServiceId>Infinispan</feedburner:emailServiceId><feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-315882200584722469</id><published>2017-02-10T12:28:00.002-08:00</published><updated>2017-02-10T12:28:30.041-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="9.0" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><category scheme="http://www.blogger.com/atom/ns#" term="release candidate" /><title type="text">Infinispan 9.0.0.CR1</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Those busy hackers over in the Infinispan dungeon have brewed up a new release, and it is the first candidate on the road to the final 9.&lt;br /&gt;Infinispan 9.0.0.CR1 (codenamed "&lt;a href="https://www.ruppaner-bodensee.de/die-brauerei/"&gt;Ruppaner&lt;/a&gt;") includes a number of fixes and component upgrades over the last Beta release. You can read all about these in the &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12330027"&gt;fixed issues&lt;/a&gt; &lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;We have also done a lot of work to restructure the &lt;a href="http://infinispan.org/docs/dev/user_guide/user_guide.html"&gt;user guide&lt;/a&gt;, &lt;a href="http://infinispan.org/docs/dev/upgrading/upgrading.html"&gt;upgrade guide&lt;/a&gt; and &lt;a href="http://infinispan.org/docs/dev/server_guide/server_guide.html"&gt;server admin guide&lt;/a&gt; to make it easier to find the answers you need.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;So, please head over to the &lt;a href="http://infinispan.org/download/"&gt;download page&lt;/a&gt; and try it out. If you have an issue, please report it in our &lt;a href="https://issues.jboss.org/projects/ISPN/summary"&gt;bug tracker&lt;/a&gt;, ask us on the &lt;a href="https://developer.jboss.org/en/infinispan/content"&gt;forum&lt;/a&gt;, or join us for a friendly chat on the #infinispan IRC channel on &lt;a href="http://webchat.freenode.net/"&gt;Freenode.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Prost,&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Your friendly Infinispan team&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/b0phj2bt6L4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/315882200584722469/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/02/infinispan-900cr1.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/315882200584722469" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/315882200584722469" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/b0phj2bt6L4/infinispan-900cr1.html" title="Infinispan 9.0.0.CR1" /><author><name>Tristan Tarrant</name><uri>https://plus.google.com/107212596455518362860</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh4.googleusercontent.com/-vju6PV5EA0c/AAAAAAAAAAI/AAAAAAAAKr8/ABu9Ii4jylc/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/02/infinispan-900cr1.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-8528236734106190723</id><published>2017-02-08T23:47:00.002-08:00</published><updated>2017-02-08T23:47:34.927-08:00</updated><title type="text">Hotrod clients C++/C# 8.1.0.CR1 released!</title><content type="html">Dears, &lt;br /&gt;&lt;br /&gt;we're pleased to announce that 8.1.0.CR1 release for C++/C# clients is out!  Downloading the code you'll find these changes (and may more):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;C++11 instead of the old portable custom classes&lt;/li&gt;&lt;li&gt;less bugs&lt;/li&gt;&lt;li&gt;more safety through TLS client authentication&lt;/li&gt;&lt;/ul&gt;We're getting closer to a final release, more updates on what's going on here: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/projects/HRCPP/summary/statistics"&gt;https://issues.jboss.org/projects/HRCPP/summary/statistics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/infinispan/cpp-client"&gt;https://github.com/infinispan/cpp-client&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/infinispan/dotnet-client"&gt;https://github.com/infinispan/dotnet-client&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/glf_HXG4kXk" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/8528236734106190723/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/02/hotrod-clients-cc-810cr1-released.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8528236734106190723" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8528236734106190723" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/glf_HXG4kXk/hotrod-clients-cc-810cr1-released.html" title="Hotrod clients C++/C# 8.1.0.CR1 released!" /><author><name>rigazilla</name><uri>http://www.blogger.com/profile/04086218083589623172</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/02/hotrod-clients-cc-810cr1-released.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-437701447542440150</id><published>2017-01-24T05:50:00.002-08:00</published><updated>2017-01-24T05:51:04.789-08:00</updated><title type="text">Infinispan 9.0.0.Beta2 and 8.2.6.Final are out!</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;It's release day at Infinispan HQ and we've just released a couple of new versions:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Infinispan 9.0.0.Beta2 includes:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;New:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Multi-tenancy support for Hot Rod and REST endpoints improve Infinispan Server experience on OpenShift.&lt;/li&gt;&lt;li&gt;Transactional support for Functional API (thx Radim!)&lt;/li&gt;&lt;li&gt;Internal data container changes, see Will's blog posts (&lt;a href="http://blog.infinispan.org/2016/12/data-container-changes-part-1.html"&gt;here&lt;/a&gt; and &lt;a href="http://blog.infinispan.org/2017/01/data-container-changes-part-2.html"&gt;here&lt;/a&gt;) for more info.&lt;/li&gt;&lt;li&gt;Off-heap bounded data container has been added.&lt;/li&gt;&lt;li&gt;ElasticSearch storage for indexes.&lt;/li&gt;&lt;li&gt;Multiple additions and enhancements to the management console.&lt;/li&gt;&lt;li&gt;Further performance improvements.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Backwards compatibility:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Binary and mixed JDBC cache stores have been removed. To migrate data over, use the &lt;a href="http://infinispan.org/docs/dev/user_guide/user_guide.html#jdbc_migrator"&gt;JDBC cache store migrator&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Dropped default cache inheritance.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12330026"&gt;Full release notes&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Infinispan 8.2.6.Final includes multiple bug fixes.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12332803"&gt;Full release notes&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/uERdtVcW0p4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/437701447542440150/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/01/infinispan-900beta2-and-826final-are-out.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/437701447542440150" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/437701447542440150" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/uERdtVcW0p4/infinispan-900beta2-and-826final-are-out.html" title="Infinispan 9.0.0.Beta2 and 8.2.6.Final are out!" /><author><name>Galder Zamarreño</name><uri>http://www.blogger.com/profile/07902530246353017161</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/01/infinispan-900beta2-and-826final-are-out.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-3597184894679767136</id><published>2017-01-23T13:35:00.002-08:00</published><updated>2017-01-27T05:11:39.710-08:00</updated><title type="text">Data Container Changes Part 2</title><content type="html">Before the end of the year I wrote a &lt;a href="http://blog.infinispan.org/2016/12/data-container-changes-part-1.html"&gt;blog post&lt;/a&gt; detailing some of the more recent changes that Infinispan introduced with the in memory data container.&amp;nbsp; As was mentioned in the previous post we would be detailing some other new changes. If you poked around in our new &lt;a href="https://docs.jboss.org/infinispan/9.0/configdocs/infinispan-config-9.0.html"&gt;schema&lt;/a&gt; after Beta 1 you may have spoiled the surprise for yourself.&lt;br /&gt;&lt;br /&gt;With the upcoming 9.0 Beta 2, I am excited to announce that Infinispan will have support for entries being stored &lt;b&gt;off heap&lt;/b&gt;, as in outside of the JVM heap. This has some interesting benefits and drawbacks, but we hope you can agree the benefits in many cases far outweigh the drawbacks. But before we get into that lets first see how you can configure your cache to utilize off heap.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;New Configuration&lt;/h2&gt;&lt;br /&gt;The off heap configuration is another option under the new memory element that was discussed in the previous post. It is used in the same way that either OBJECT or BINARY is used.&amp;nbsp; You can use either COUNT or MEMORY eviciton types, the example below shows the latter.&lt;br /&gt;&lt;h4&gt;XML&lt;/h4&gt;&lt;script src="https://gist.github.com/wburns/0c9ca642dd84ef0f77eeeb3507e8d903.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h4&gt;DECLARATIVE&lt;/h4&gt;&lt;script src="https://gist.github.com/wburns/3fe9d1aef54a5764b6a70b9c9cd2925c.js" type="text/javascript"&gt;&lt;/script&gt;As you can see the configuration is almost identical to the other types of storage. The only real difference is the new address pointer argument, which will be explained below. &lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Requirements&lt;/h2&gt;&lt;br /&gt;Our off heap implementation supports all existing features of Infinispan. There are some limitations and drawbacks of using the feature. This section will describe these in further detail.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Serialization&lt;/h3&gt;&lt;br /&gt;Off Heap runs in essentially BINARY mode, which requires entries to be serialized into their byte[] forms. Thus all keys and entries must be Serializable or have provided Infinispan &lt;a href="http://infinispan.org/docs/dev/user_guide/user_guide.html#marshalling"&gt;Externalizers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Size&lt;/h3&gt;&lt;br /&gt;Currently a key and a value must be able to be stored in a byte[]. Therefore a key or value in serialized form cannot be more than just over 2 Gigabytes.&amp;nbsp; This could be enhanced possibly at a later point, if the need arose.&amp;nbsp; I hope you aren't transferring this over your network though!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Implementation Details&amp;nbsp;&lt;/h2&gt;&lt;br /&gt;Our off heap implementation uses the Java  Unsafe to allocate memory outside of the Java heap. This data is stored  as a bucket of linked list pointers, just like a standard Java HashMap.  When an entry is added the key's serialized byte[] is hashed and an  appropriate offset is found in the bucket. Then the entry is added to  the bucket as the first element or if an entry(ies) is present it is  added to the rear of the linked list.&lt;br /&gt;&lt;br /&gt;All of this data  is protected by an array of ReadWriteLock instances.&amp;nbsp; The number of  address pointers is evenly divisible by the number of lock instances.&amp;nbsp;  The number of lock instances is how many cores your machines doubled and  rounded to the nearest power of two.&amp;nbsp; Thus each lock protects an  equivalent amount of address spaces.&amp;nbsp; This provides for good lock  granularity and reads will not block each other but unfortunately writes  will wait and block all reads.&lt;br /&gt;&lt;br /&gt;If you are using a  bounded off heap container either by count or memory this will create a  backing LRU doubly linked list to keep track of which elements were  accessed most recently and removes the least recently accessed element  when there are too many present in the cache.&lt;br /&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Memory Overhead&lt;/h3&gt;&lt;br /&gt;As with all cache implementations  there is overhead required to store these entries. We have a fixed and  variable overhead which scales with the amount of entries.  I will  detail these and briefly mention what they are used for.&lt;br /&gt;&lt;h4&gt;Fixed overhead&lt;/h4&gt;As was mentioned there is a new address count  parameter when configuring off heap. This value is used to determine how  many linked list pointers are available. Normally you want to have more  node pointers than you have entries in the cache, since then chances  are you have one element in each linked list.&amp;nbsp; This is very similar to  the &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html#HashMap%28int%29"&gt;int argument constructor&lt;/a&gt; for HashMap.&amp;nbsp; It is also rounded up to the nearest power of two.&amp;nbsp; The  big difference being that this off heap implementation will not resize.&amp;nbsp;  Thus your read/write times will be slower if you have a lot of  collisions. The overhead of a pointer is 8 bytes, so for approximately  one million pointers it will be 8 Megabytes of off heap.&lt;br /&gt;&lt;br /&gt;Bounded  off heap requires very little fixed memory, just 32 bytes for head/tail  pointers and a counter and an additional Java lock object.&lt;br /&gt;&lt;h4&gt;Variable overhead&lt;/h4&gt;Unfortunately to store your entries we may need  to wrap them with some data. Thus for every entry you add to the cache  we store an additional 25 bytes for each entry.&amp;nbsp; This data is used for  header information and also our linked list forward pointer.&lt;br /&gt;&lt;br /&gt;Bounded  off heap requires additional housekeeping for its LRU list nodes.&amp;nbsp; Thus  each entry adds an additional 36 bytes above the number above. It is  larger due to requiring a doubly linked list and having to have pointers  to and from the entry and eviction node. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Performance &lt;/h3&gt;&lt;br /&gt;The off heap container was designed with the intent that key lookups are quite fast.  In general these should be about the same performance. However local reads and stream operations can be a little slower as there is an additional deserialization phase required.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;br /&gt;We hope you all try out our new off heap feature! Please make sure to contact us if you have any feedback, find any bugs or have any questions!&amp;nbsp; You can get in contact with us on our &lt;a href="https://developer.jboss.org/en/infinispan/content"&gt;forum&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt;, or directly on IRC freenode channel &lt;a href="http://webchat.freenode.net/?channels=%23infinispan"&gt;Infinispan&lt;/a&gt;.&amp;nbsp; &lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/7gUg4kIUbyE" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/3597184894679767136/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/01/data-container-changes-part-2.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3597184894679767136" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3597184894679767136" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/7gUg4kIUbyE/data-container-changes-part-2.html" title="Data Container Changes Part 2" /><author><name>William Burns</name><uri>https://plus.google.com/112734869901288577754</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-J7pT8VaKi8w/AAAAAAAAAAI/AAAAAAAAADQ/pF4bvxphTic/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/01/data-container-changes-part-2.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-8996251127832570573</id><published>2017-01-23T09:23:00.000-08:00</published><updated>2017-01-23T09:23:39.558-08:00</updated><title type="text">9.x JDBC Store Improvements</title><content type="html">Infinispan 9 introduces several changes to the JDBC stores, in summary:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Configuration of DB version&lt;/li&gt;&lt;li&gt;Upsert support for store writes&lt;/li&gt;&lt;li&gt;Timestamp indexing&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.mchange.com/projects/c3p0/"&gt;c3p0&lt;/a&gt;&amp;nbsp;connection pool replaced by&amp;nbsp;&lt;a href="https://github.com/brettwooldridge/HikariCP"&gt;HikariCP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;DB Version Configuration&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Previously when configuring a JDBC store it was only possible for a user to specify the vendor of the underlying DB. Consequently, it was not possible for Infinispan to utilise more recent features of DB as the SQL utilised by our JDBC stores had to satisfy the capabilities of the oldest supported DB version. &lt;br /&gt;&lt;br /&gt;In Infinispan 9 we have completely refactored the code responsible for generating SQL queries. &amp;nbsp;Enabling our JDBC stores to take greater advantage of optimisations and features applicable to a given database vendor and version. See the below gist for examples of how to specify the major and minor versions of your database.&lt;br /&gt;&lt;br /&gt;Programmatic config:&lt;br /&gt;&lt;script src="https://gist.github.com/ryanemerson/23322fc6d6dccdedd78cf892fe79dc97.js"&gt;&lt;/script&gt; XML Config:&lt;br /&gt;&lt;script src="https://gist.github.com/ryanemerson/0f295b1013889ca01860e0611caba378.js"&gt;&lt;/script&gt; &lt;b&gt;Note&lt;/b&gt;: If no version information is provided, then we attempt to retrieve version data via the JDBC driver. &amp;nbsp;This is not always possible and in such cases we default to SQL queries which are compatible with the lowest supported version of the specified DB dialect. &lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Upsert Support&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;As a consequence of the refactoring mentioned above, writes to the JDBC stores finally utilise upserts. Previously, the JDBC stores had to first select an entry, before inserting or updating a DB row depending on whether the entry previously existed. &amp;nbsp;Now, in supported DBs, store writes are performed atomically via a single SQL statement.&lt;br /&gt;&lt;br /&gt;In some cases it may be desirable for the previous store behaviour to be utilised, in such cases the following property should be passed to your store's configuration and set to true: `infinispan.jdbc.upsert.disabled`.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Timestamp Indexing&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;By default an index is now created on the `timestamp-column` of a JDBC store when the "create-on-start" option is set to true for a store's table. &amp;nbsp;The advantage of this index is that it prevents the DB from having to perform full table searches when purging a table of expired cache entries. &amp;nbsp;Similar to upsert support, this index is optional an can be disabled by setting the property `infinispan.jdbc.indexing.disabled` to true. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Hello HikariCP&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In Infinispan 9 we welcome HikariCP as the new default implementation for the JDBC PooledConnectionFactory. HikariCP provides superior performance to c3p0 (the previous default), whilst also providing a much smaller footprint. The PooledConnectionFactoryConfiguration remains the same as before, expect we now include the ability to explicitly define a properties file where additional configuration parameters can be specified for the underlying HikariCP. For a full list of the available HikariCP configuration properties, please see the&amp;nbsp;&lt;a href="https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby"&gt;official documentation&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;Note:&lt;/b&gt; Support for c3p0 has been deprecated and will be removed in a future release. However, users can force c3p0 to be utilised as before by providing the system property `-Dinfinispan.jdbc.c3p0.force=true`.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;We have introduced the above new features to the JDBC stores in order to improve performance and to enable us to further the store's capabilities in the future. If you're a user of the JDBC stores and have any feedback on the latest changes, or would like to request some new features/optimisations, let us know via the&amp;nbsp;&lt;a href="https://developer.jboss.org/en/infinispan/content" style="background-color: white; color: #431609; font-family: Helvetica, &amp;quot;Trebuchet MS&amp;quot;, Trebuchet, Verdana, sans-serif; font-size: 13px; text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; text-decoration: underline; vertical-align: baseline;"&gt;forum&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline;"&gt;,&amp;nbsp;&lt;/span&gt;&lt;a href="https://issues.jboss.org/projects/ISPN" style="background-color: white; color: #431609; font-family: Helvetica, &amp;quot;Trebuchet MS&amp;quot;, Trebuchet, Verdana, sans-serif; font-size: 13px; text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; text-decoration: underline; vertical-align: baseline;"&gt;issue tracker&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline;"&gt;&amp;nbsp;or the #infinispan channel on&lt;/span&gt;&lt;a href="http://webchat.freenode.net/?channels=%23infinispan" style="background-color: white; color: #431609; font-family: Helvetica, &amp;quot;Trebuchet MS&amp;quot;, Trebuchet, Verdana, sans-serif; font-size: 13px; text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; text-decoration: underline; vertical-align: baseline;"&gt;&amp;nbsp;Freenode&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline;"&gt;.&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/BQcfDUY1veY" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/8996251127832570573/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/01/9x-jdbc-store-improvements.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8996251127832570573" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8996251127832570573" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/BQcfDUY1veY/9x-jdbc-store-improvements.html" title="9.x JDBC Store Improvements" /><author><name>RyanEmerson</name><uri>http://www.blogger.com/profile/15577577649748644970</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/01/9x-jdbc-store-improvements.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-7743170217750163171</id><published>2017-01-11T07:11:00.001-08:00</published><updated>2017-01-16T07:16:56.984-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="8.1.0" /><category scheme="http://www.blogger.com/atom/ns#" term="c#" /><category scheme="http://www.blogger.com/atom/ns#" term="c++" /><category scheme="http://www.blogger.com/atom/ns#" term="cpp-client" /><category scheme="http://www.blogger.com/atom/ns#" term="dotnet-client" /><category scheme="http://www.blogger.com/atom/ns#" term="hotrod" /><category scheme="http://www.blogger.com/atom/ns#" term="near caching" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Near Cache for native C++/C# Client example</title><content type="html">Dear Readers,&lt;br /&gt;&lt;br /&gt;as mentioned in our previous post about the new C++/C# release &lt;a href="http://blog.infinispan.org/2017/01/hotrod-clients-cc-810beta1-released.html"&gt;8.1.0.Beta1&lt;/a&gt;, clients are now equipped with near cache support. &lt;br /&gt;&lt;br /&gt;The near cache is an additional cache level that keeps the most recently used  cache entries in an "in memory" data structure. Near cached objects are synchronized with the remote server value in the background and can be get as fast as a map[] operation.&lt;br /&gt;&lt;br /&gt;So, your client tends to periodically focus the operations on a subset of your entries? This feature could be of help: it's easy to use, just enable it and you'll have near cache seamless under the wood.&lt;br /&gt;&lt;br /&gt;A C++ example of a cache with near cache configuration&lt;br /&gt;&lt;script src="https://gist.github.com/rigazilla/a6aa565445ffb04cdf6699dbf3d08599.js"&gt;&lt;/script&gt;The last line does the magic, the INVALIDATED mode is the active mode for the near cache (default mode is DISABLED which means no near cache, see Java docs), maxEntries is the maximum number of entries that can be stored nearly. If the near cache is full the oldest entry will be evicted. Set maxEntries=0 for unbounded cache (do you have enough memory?) &lt;br /&gt;Now a full example of application that just does some gets and puts and counts how many of them are served remote and how many are served nearly. As you can see the cache object is an instance of the "well known" RemoteCache class&lt;br /&gt;&lt;script src="https://gist.github.com/rigazilla/2b1583543a375fe0bd66016c7f4041e4.js"&gt;&lt;/script&gt;Entries values in the near cache are kept aligned with the remote cache state via the events subsystem: if something changes in the server, an update event (modified, expired, removed) is sent to the client that updates the cache accordingly.&lt;br /&gt;&lt;br /&gt;By the way: do you know that C++/C# clients can subscribe listener to events? In the next "native" post we will see how.&lt;br /&gt;&lt;br /&gt;Cheers!&lt;br /&gt;and thank you for reading. &lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/7tM5BDkCbAM" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/7743170217750163171/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/01/near-cache-for-native-cc-client-example.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7743170217750163171" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7743170217750163171" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/7tM5BDkCbAM/near-cache-for-native-cc-client-example.html" title="Near Cache for native C++/C# Client example" /><author><name>rigazilla</name><uri>http://www.blogger.com/profile/04086218083589623172</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/01/near-cache-for-native-cc-client-example.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-3878069424582724468</id><published>2017-01-04T08:29:00.002-08:00</published><updated>2017-01-04T08:29:47.055-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="8.1.0" /><category scheme="http://www.blogger.com/atom/ns#" term="c#" /><category scheme="http://www.blogger.com/atom/ns#" term="c++" /><category scheme="http://www.blogger.com/atom/ns#" term="cpp-client" /><category scheme="http://www.blogger.com/atom/ns#" term="dotnet-client" /><category scheme="http://www.blogger.com/atom/ns#" term="hotrod" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Hotrod clients C++/C# 8.1.0.Beta1 released!</title><content type="html">New Year, New (Beta) Clients!&lt;br /&gt;&lt;br /&gt;I'm pleased to announce that the C++/C# clients version 8.1.0.Beta1 are out!&lt;br /&gt;The big news in this release is:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Near Caching Support&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Find the bits in the usual place:&lt;a href="http://infinispan.org/hotrod-clients/" target="_blank"&gt; http://infinispan.org/hotrod-clients/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="https://issues.jboss.org/browse/HRCPP-289"&gt;Features list for 8.1&lt;/a&gt; is almost done... not bad :)&lt;br /&gt;Feedbacks, proposals, hints and lines of code are welcome!&lt;br /&gt;&lt;br /&gt;Happy New Year,&lt;br /&gt;The Infinispan Team&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/MjSgnWlnY_8" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/3878069424582724468/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2017/01/hotrod-clients-cc-810beta1-released.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3878069424582724468" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3878069424582724468" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/MjSgnWlnY_8/hotrod-clients-cc-810beta1-released.html" title="Hotrod clients C++/C# 8.1.0.Beta1 released!" /><author><name>rigazilla</name><uri>http://www.blogger.com/profile/04086218083589623172</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2017/01/hotrod-clients-cc-810beta1-released.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-8263782875884715019</id><published>2016-12-20T07:06:00.000-08:00</published><updated>2016-12-20T07:06:08.155-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="spring" /><title type="text">Spring Boot Starters</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: justify;"&gt;Ho, ho, hooo! It looks like all members of Infinispan Community have been nice and Santa brought you Spring Boot Starters!&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://cdn.meme.am/cache/instances/folder65/500x/74064065.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="https://cdn.meme.am/cache/instances/folder65/500x/74064065.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;This will make you even more productive and your code less verbose!&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Why do I need starters?&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;Spring Boot Starters make the bootstrapping process much easier and faster. The starter brings you required Maven dependencies as well as some predefined configuration bits.&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;What do I need to get started?&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;The starter can operate in two modes: client/server (when you connect to a remote Infinispan Server cluster) and embedded (packaged along with your app). The former is the default. It's also possible to use both those modes at the same time (store some data along with your app and connect to a remote Infinispan Server cluster to perform some other type of operations).&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Assuming you have an Infinispan Server running on IP address 192.168.0.17, all you need to do is to use the following dependencies:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/bab649181c4e31c38caafafd85050103.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="text-align: justify;"&gt;By default, the starter will try to locate&amp;nbsp;&lt;i&gt;hotrod-client.properties&lt;/i&gt; file. The file should contain at least the server list:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/29b98e9199886d147fc8138195174a59.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="text-align: justify;"&gt;It is also possible to create &lt;i&gt;RemoteCacheManager&lt;/i&gt;'s configuration manually:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/41868fa4388c6b51d80049ea7765c4b1.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="text-align: justify;"&gt;That's it! Your app should successfully connect to a remote cluster and you should be able to inject &lt;i&gt;RemoteCacheManager&lt;/i&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Using Infinispan embedded is even simpler than that. All you need to do is to add additional dependency to the classpath:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/3e40ceaae5a55845129796733ec9bcbf.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="text-align: justify;"&gt;The starter will provide you a preconfigured &lt;i&gt;EmbeddedCacheManager&lt;/i&gt;. In order to customize the configuration, use the following code snippet:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/fe3ffea8d0f7dbf547975a1275550d7a.js"&gt;&lt;/script&gt; &lt;h2&gt;Further reading&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;There are two link I highly recommend you to read. The first is the &lt;a href="https://github.com/infinispan/infinispan-simple-tutorials/tree/master/spring-boot" target="_blank"&gt;Spring Boot tutorial&lt;/a&gt; and the second is the &lt;a href="https://github.com/infinispan/infinispan-spring-boot" target="_blank"&gt;Github page of the Starters project&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Kudos&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;Special thanks go to&amp;nbsp;Marco Yuen, who donated us with Spring Boot Starters code and Tomasz Zabłocki, who updated them to current version and&amp;nbsp;Stéphane Nicoll who spent tremendous amount of time reviewing the Starters.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/uzKzIM0Q0oQ" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/8263782875884715019/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/spring-boot-starters.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8263782875884715019" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8263782875884715019" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/uzKzIM0Q0oQ/spring-boot-starters.html" title="Spring Boot Starters" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/spring-boot-starters.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-7630210085989661942</id><published>2016-12-19T12:50:00.001-08:00</published><updated>2016-12-19T13:58:39.522-08:00</updated><title type="text">Data Container Changes Part 1</title><content type="html">Infinispan 9.0 Beta 1 introduces some big changes to the Infinispan data container.&amp;nbsp; This is the first of two blog posts detailing those changes.&lt;br /&gt;&lt;br /&gt;This post will cover the changes to eviction which utilizes a new provider, &lt;a href="https://github.com/ben-manes/caffeine"&gt;Caffeine&lt;/a&gt;.&amp;nbsp; As you may already know Infinispan has supported our own implementations of &lt;a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU"&gt;LRU&lt;/a&gt; (Least Recently Used) and &lt;a href="https://en.wikipedia.org/wiki/LIRS_caching_algorithm"&gt;LIRS&lt;/a&gt; (Low Inter-reference Receny Set) algorithms for our bounded caches.&lt;br /&gt;&lt;br /&gt;Our implementations of eviction were even rewritten for Infinispan 8, but we found we still had some issues or limitations with them, especially LIRS.&amp;nbsp; Our old implementation had some problems with keeping the correct number of entries.&amp;nbsp; The new implementation while not having that issue had others, such as being considerably more complex.&amp;nbsp; And while it implemented the entire LIRS specification, it could have memory usage &lt;a href="https://issues.jboss.org/browse/ISPN-7171"&gt;issues&lt;/a&gt;.&amp;nbsp; This led us to looking at alternatives and Caffeine seemed like a logical fit as well as being well maintained and the author, Ben Manes, is quite responsive.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Enter Caffeine &lt;/h2&gt;&lt;br /&gt;Caffeine doesn't utilize LRU or LIRS for its eviction algorithm and instead implements &lt;a href="https://arxiv.org/abs/1512.00727"&gt;TinyLFU&lt;/a&gt; with an admission window.&amp;nbsp; This has the benefit of the high hit ratio like LIRS, while also requiring low memory overhead like LRU.&amp;nbsp; Caffeine also provides custom weighting for objects, which allow us to reuse the code that was developed for MEMORY based eviction as well.&lt;br /&gt;&lt;br /&gt;The only thing that Caffeine doesn't support is our idea of a custom &lt;a href="https://docs.jboss.org/infinispan/8.2/apidocs/org/infinispan/commons/equivalence/Equivalence.html"&gt;Equivalence&lt;/a&gt;.&amp;nbsp; Thus Infinispan now wraps byte[] instances to ensure equals and hashCode methods work properly.&amp;nbsp; This also gives us a good opportunity to reevaluate the dataContainer configuration element.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Deprecations &lt;/h2&gt;&lt;br /&gt;The data container configuration has thus been deprecated and is now replaced by a new configuration element named memory. &amp;nbsp; Also since we are adding a new element the eviction configuration could also be consolidated into memory, and thus eviction is also deprecated.&amp;nbsp; And last but not least the storeAsBinary configuration element has also been integrated into the new memory configuration element.&amp;nbsp; Now we have 1 configuration element instead of 3, can't beat that!&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;New Configuration&lt;/h2&gt;&lt;br /&gt;The new memory configuration will start out pretty simple and new elements can be added as there is a need.&amp;nbsp; The memory element will be composed of a single sub element that can be of three different choices.&amp;nbsp; For this post we will go over two of the sub elements: OBJECT and BINARY.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;OBJECT&lt;/h3&gt;&lt;br /&gt;Object storage stores the actual objects as provided from the user in the Java Heap.&amp;nbsp; This is the default storage method when no memory configuration is provided.&amp;nbsp; This method will provide the best performance when using operations that operate upon the entire data set, such as distributed streams, indexing and local reads etc.&lt;br /&gt;&lt;br /&gt;Unfortunately OBJECT storage only allows for COUNT based eviction as we cannot properly estimate user object types properly.&amp;nbsp; This could be improved in a feature version if there is enough interest.  Note that you can technically configured MEMORY eviction type with the OBJECT storage type with declarative configuration, but it will throw an exception when you build the configuration.&amp;nbsp; Therefore OBJECT only has a single element named size to determine the amount of entries that can be stored in the cache.&lt;br /&gt;&lt;br /&gt;An example of how Object storage can be configured: &lt;br /&gt;&lt;h4&gt;XML&lt;/h4&gt;&lt;h4&gt;&lt;script src="https://gist.github.com/wburns/b5da494ca14fd8eb2f9f7061107fce21.js" type="text/javascript"&gt;&lt;/script&gt; DECLARATIVE&lt;/h4&gt;&lt;script src="https://gist.github.com/wburns/25f6fa19bd36a22c7d1c7f62ebf002a5.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h3&gt;BINARY&lt;/h3&gt;&lt;br /&gt;Binary storage stores the object in its serialized form in a byte array.&amp;nbsp; This has an interesting side effect of objects are always stored as a deep copy.&amp;nbsp; This can be useful if you want to modify an object after retrieving it without affecting the underlying cache stored object.&amp;nbsp; Since objects have to be deserialized when performing operations on them some things such as distributed streams and local gets will be a little bit slower.&lt;br /&gt;&lt;br /&gt;A nice benefit of storing entries as BINARY is that we can estimate the total on heap size of the object.&amp;nbsp; Thus BINARY supports both COUNT and MEMORY based eviction types.&lt;br /&gt;&lt;br /&gt;An example of how Binary storage can be configured: &lt;br /&gt;&lt;h4&gt;XML&lt;/h4&gt;&lt;h4&gt;&lt;script src="https://gist.github.com/wburns/02ab0995d22c34ac27110c00ad64a13a.js" type="text/javascript"&gt;&lt;/script&gt; DECLARATIVE&lt;/h4&gt;&lt;script src="https://gist.github.com/wburns/50eef2186359579e1050abe9597fe4e5.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h3&gt;OFF-HEAP&lt;/h3&gt;&lt;br /&gt;This option will be described in more detail in the next blog post.&amp;nbsp; Stay tuned! &lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;br /&gt;Caffeine should bring us a great solution, while also reducing a lot of maintenance ourselves.&amp;nbsp; The new memory configuration also provides a simpler solution by removing two other configuration elements.&lt;br /&gt;&lt;br /&gt;We hope you enjoy the new changes to the data container and look out for another blog post coming soon to detail the other new changes to the data container!&amp;nbsp; In the meantime please check out our latest &lt;a href="http://infinispan.org/download/"&gt;Infinispan 9.0&lt;/a&gt; before it goes final and give us any feedback on &lt;a href="irc://irc.freenode.net/infinispan"&gt;IRC&lt;/a&gt; or &lt;a href="https://jira.jboss.org/browse/ISPN"&gt;JIRA&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/tvVNa3X6lnI" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/7630210085989661942/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/data-container-changes-part-1.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7630210085989661942" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7630210085989661942" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/tvVNa3X6lnI/data-container-changes-part-1.html" title="Data Container Changes Part 1" /><author><name>William Burns</name><uri>https://plus.google.com/112734869901288577754</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-J7pT8VaKi8w/AAAAAAAAAAI/AAAAAAAAADQ/pF4bvxphTic/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/data-container-changes-part-1.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-8878242172893872042</id><published>2016-12-15T02:12:00.002-08:00</published><updated>2016-12-15T02:12:54.510-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="conference" /><title type="text">Thanks Soft-Shake and Devoxx Morocco!</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Last month I presented about building functional reactive applications with Infinispan, Node.js and Elm at both Soft-Shake in Geneva (&lt;a href="https://speakerdeck.com/galderz/learn-how-to-build-functional-reactive-applications-with-elm-node-dot-js-and-infinispan"&gt;slides&lt;/a&gt;) and Devoxx Morocco (&lt;a href="https://speakerdeck.com/galderz/learn-how-to-build-functional-reactive-applications-with-elm-node-dot-js-and-infinispan-1"&gt;slides&lt;/a&gt;).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Thanks a lot to all the participants who attended the talks and thanks also to the organisers for accepting my talk. Both conferences were really enjoyable!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At Soft-Shake I managed to attend a few presentations, and the one that really stuck with me was the one from Alexandre Masselot on &lt;a href="http://www.kora.li/admin.html#/index/p?u=alex_masselot&amp;amp;s=tribulations_CFF&amp;amp;c=softshake&amp;amp;e=Donkey_Kong"&gt;"Données CFF en temps réel: tribulations techniques dans la stack Big Data"&lt;/a&gt;&amp;nbsp;(&lt;a href="http://www.slideshare.net/alexmass/swiss-transport-in-real-time-tribulations-in-the-big-data-stack"&gt;slides&lt;/a&gt;). It was a very interesting use case on doing big data with the information from the Swiss Rail system. Although there was no live demo, Alexandre gave the link to a repo where you can run stuff yourself. Very cool!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;On top of that, I also attended a talk by Tom Bujok on Scaling Your Application Out. Tom happens to be an old friend who since I last met him has joined Hazelcast ;)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://pbs.twimg.com/media/Cv4IVYPXYAAwUF-.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://pbs.twimg.com/media/Cv4IVYPXYAAwUF-.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Shortly after Shoft-Shake I headed to Casablanca to speak at Devoxx Morocco. This was a fantastic conference with a lot of young attendees. The room was almost packed up for my talk and I got good reaction from the audience on both the talk and the live demo.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;During the conference I also attended other talks, including a couple of Kubernetes talks by Ray Tsang, who is an Infinispan committer himself. In his presentations he uses a &lt;a href="https://github.com/saturnism/gcp-live-k8s-visualizer"&gt;Kubernetes visualizer&lt;/a&gt; which is very cool and I'm hoping to use it in future presentations :)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;No more conferences for this year, thanks to all who've attended Infinispan presentations throughout the year!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/9MIzYZlmVCw" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/8878242172893872042/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/thanks-soft-shake-and-devoxx-morocco.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8878242172893872042" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8878242172893872042" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/9MIzYZlmVCw/thanks-soft-shake-and-devoxx-morocco.html" title="Thanks Soft-Shake and Devoxx Morocco!" /><author><name>Galder Zamarreño</name><uri>http://www.blogger.com/profile/07902530246353017161</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/thanks-soft-shake-and-devoxx-morocco.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-6924153057805410893</id><published>2016-12-08T04:50:00.000-08:00</published><updated>2016-12-08T04:52:02.368-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="9.0" /><category scheme="http://www.blogger.com/atom/ns#" term="DSL" /><category scheme="http://www.blogger.com/atom/ns#" term="full-text" /><category scheme="http://www.blogger.com/atom/ns#" term="Hibernate-Search" /><category scheme="http://www.blogger.com/atom/ns#" term="indexing" /><category scheme="http://www.blogger.com/atom/ns#" term="JP-QL" /><category scheme="http://www.blogger.com/atom/ns#" term="jpa" /><category scheme="http://www.blogger.com/atom/ns#" term="language" /><category scheme="http://www.blogger.com/atom/ns#" term="lucene" /><category scheme="http://www.blogger.com/atom/ns#" term="query" /><title type="text">Meet Ickle!</title><content type="html">&lt;div dir="ltr" id="docs-internal-guid-04619441-de6b-024f-1a8e-a4977a23b5c6" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;As you’ve already learned from an earlier post this week, Infinispan 9 is on its final approach to landing and is bringing a new query language. Hurray! But wait, was there something wrong with the old one(s)? Not wrong really ... &amp;nbsp;I’ll explain.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Infinispan is a data grid of several query languages. Historically, it has offered search support early in its existence by integrating with Hibernate Search which provides a powerful Java-based DSL enabling you to build Lucene queries and run them on top of your Java domain model living in the data grid. Usage of this integration is confined to embedded mode, but that still succeeds in making Java users happy.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;While the Hibernate Search combination is neat and very appealing to Java users it completely leaves non-JVM languages accessing Infinispan via remote protocols out in the cold.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Enter Remote Query. Infinispan 6.0 starts to address the need of searching the grid remotely via Hot Rod. The internals are still built on top of Lucene and Hibernate Search bedrock but these technologies are now hidden behind a new query API, the &lt;/span&gt;&lt;a href="https://docs.jboss.org/infinispan/9.0/apidocs/org/infinispan/query/dsl/QueryBuilder.html" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt;QueryBuilder&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;, an internal DSL resembling JPA criteria query. The QueryBuilder has implementations for both embedded mode and Hot Rod. This new API provides all relational operators you can think of, but no full-text search initially, we planned to add that later.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Creating a new internal DSL was fun. However, having a long term strategy for evolving it while keeping complete backward compatibility and also doing so uniformly across implementations in multiple languages proved to be a difficult challenge. So while we were contemplating adding new full-text operators to this DSL we decided on making a long leap forward and adopt a more flexible alternative by having our own string based query language instead, another DSL really, albeit an external one this time. &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;So after the long ado, let me introduce &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;Ickle&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;, Infinispan’s new query language, conspicuously resembling JP-QL.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;Ickle:&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;/div&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;is a light and small subset of JP-QL, hence the lovely name &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;queries Java classes and supports Protocol Buffers too&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;queries can target a &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;single&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; entity type&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;queries can filter on properties of embedded objects too, including collections&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;supports projections, aggregations, sorting, named parameters&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;supports indexed and non-indexed execution&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;supports complex boolean expressions&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;does not support computations in expressions (eg. &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;user.age &amp;gt; sqrt(user.shoeSize + 3)&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; is not allowed but &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;user.age &amp;gt;= 18&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; is fine)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;does not support joins&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: circle; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;but, navigations along embedded entities are implicit joins and are allowed&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: circle; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;joining on embedded collections is allowed&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: circle; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;other join types not supported&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;subqueries are not supported&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;besides the normal relational operators it offers full-text operators, similar to Lucene’s &amp;nbsp;query parser&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: #cacaca; font-family: Arial; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;is now supported across various Infinispan APIs, wherever a Query produced by the QueryBuilder is accepted (even for continuous queries or in event filters for listeners!)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;That is to say we squeezed JP-QL to the bare minimum and added full-text predicates that closely follow the syntax of &lt;/span&gt;&lt;a href="https://lucene.apache.org/core/6_2_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt;Lucene’s query parser&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;If you are familiar with JPA/JP-QL then the following example will speak for itself:&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;select&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; accountId, &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;sum&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(amount) &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;from&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; com.acme.Transaction &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;where&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; amount &lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;20&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;0&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;group&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;by&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; accountId &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;having&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;sum&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(amount) &lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;1000&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;0&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;order&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;by&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; accountId&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-indent: 36pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;The same query can be written using the QueryBuilder:&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Query query = queryFactory.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;from&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(Transaction.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;class&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;)&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;select&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(Expression.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;property&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"accountId"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;), Expression.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;sum&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"amount"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;))&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;having&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"amount"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;).&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;lt&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: transparent; color: #6600ee; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;20.0&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;)&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;groupBy&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"accountId"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;)&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;having&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(Expression.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;sum&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"amount"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;)).&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;gt&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: transparent; color: #6600ee; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;1000.0&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;)&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;orderBy&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;(&lt;/span&gt;&lt;span style="background-color: #fff0f0; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"accountId"&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;).&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;build&lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;();&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 72pt; margin-top: 0pt; text-indent: 36pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Both examples look nice but I hope you will agree the first one is better.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Ickle supports several new predicates for full-text matching that the QueryBuilder is missing. These predicates use the &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;:&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; operator that you are probably familiar from Lucene’s own query language. &amp;nbsp;This example demonstrates a simple full-text term query:&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;select&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; transactionId, amount, description &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;from&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; com.acme.Transaction &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;where&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; amount &lt;/span&gt;&lt;span style="background-color: transparent; color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;10&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;and&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"coffee"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;As you can see, relational predicates and full-text predicates can be combined with boolean operators at will. &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.656; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;The only important thing to remark here is relational predicates are applicable to non-analyzed fields while full-text predicates can be applied to analyzed field only. How does indexing work, what is analysis and how do I turn it on/off for my fields? That’s the topic of a future post, so please be patient or start reading&lt;/span&gt;&lt;a href="https://docs.jboss.org/hibernate/search/5.6/reference/en-US/html_single/#_analysis" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Besides term queries we support several more:&lt;/span&gt;&lt;/div&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Term &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"coffee"&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Fuzzy &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"cofee"&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;~&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;2&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Range &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;amount : [&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;40&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #008800; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;to&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;90&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Phrase &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"hello world"&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Proximity &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"canceling fee"&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;~&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;3&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Wildcard &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"te?t"&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Regexp &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: #fff0ff; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;/[mb]oat/&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 16pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Boosting &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"beer"&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;^&lt;/span&gt;&lt;span style="background-color: transparent; color: #0000dd; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"&gt;3&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; and description : &lt;/span&gt;&lt;span style="background-color: transparent; color: #aa6600; font-family: &amp;quot;courier new&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;"books"&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;You can read all about them starting from &lt;/span&gt;&lt;a href="https://lucene.apache.org/core/6_2_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;But is Ickle really new? Not really. The name is new, the full-text features are new, but a JP-QL-ish query string was always internally present in the Query objects produced by the QueryBuilder since the beginning of Remote Query. That language was never exposed and specified until now. It evolved significantly over time and now it is ready for you to use it. The QueryBuilder / criteria-like API is still there as a convenience but it might go out of favor over time. It will be limited to non-full-text functionality only. As Ickle grows we’ll probably not be able to include some of the additions in the QueryBuilder in a backward compatible manner. If growing will cause too much pain we might consider deprecating it in favor of Ickle or if there is serious demand for it we might continue to evolve the QueryBuilder in a non compatible manner.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Being a string based query language, Ickle is very convenient for our REST endpoint, the CLI, and the administration console allowing you to quickly inspect the contents of the grid. You’ll be able to use it there pretty soon. We’ll also continue to expand Ickle with more advanced full-text features like spatial queries and faceting, but that’s a subject for another major version. Until then, why not grab the current 9.0 Beta1 and test drive the new query language yourself? We’d love to hear your feedback on the&lt;/span&gt;&lt;a href="https://developer.jboss.org/en/infinispan/content" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt; forum&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;, on our&lt;/span&gt;&lt;a href="https://issues.jboss.org/projects/ISPN" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt; issue tracker&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt; or on IRC on the #infinispan channel on&lt;/span&gt;&lt;a href="http://webchat.freenode.net/?channels=%23infinispan" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline;"&gt; Freenode&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;. &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;"&gt;Happy coding!&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/vhp3ANwfbzI" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/6924153057805410893/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/meet-ickle.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6924153057805410893" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6924153057805410893" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/vhp3ANwfbzI/meet-ickle.html" title="Meet Ickle!" /><author><name>Adrian N.</name><uri>https://plus.google.com/114949383058533607758</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-MI8zNtYxHUg/AAAAAAAAAAI/AAAAAAAAG6Y/uGivy09KIQQ/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/meet-ickle.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-7859244941475556914</id><published>2016-12-06T11:54:00.000-08:00</published><updated>2016-12-06T11:54:15.931-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="9.0" /><category scheme="http://www.blogger.com/atom/ns#" term="infinispan" /><category scheme="http://www.blogger.com/atom/ns#" term="streams" /><title type="text">Distributed Stream Quality of Life Improvements</title><content type="html">As I hope most people reading this already know, since Infinispan 8 you can utilize the entire Java 8 Stream API and have it be distributed across your cluster.&amp;nbsp; This performs the various intermediate and terminal operations on the data local to the node it lives on, providing for extreme performance.&amp;nbsp; There are some limitations and things to know as was explained at &lt;a href="http://blog.infinispan.org/2015/09/distributed-streams.html"&gt;distributed-streams&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The problem with the API up to now was that, if you wanted to use lambdas, it was quite an ugly scene.&amp;nbsp; Take for example the following code snippet:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;8.0 Distributed Streams Example&lt;/h3&gt;&lt;script src="https://gist.github.com/wburns/fb9f92e7755ed454912d878115731514.js" type="text/javascript"&gt;&lt;/script&gt;However, for Infinispan 9 we utilize a little syntax feature added with Java 8 [&lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5"&gt;1&lt;/a&gt;] to add some much needed quality of life improvements.&amp;nbsp; This allows the most specific interface to be chosen when a method is overloaded.&amp;nbsp; This allows for a neat interaction when we add some new interfaces that implement Serializable and the various function interfaces (SerializableFunction, SerializablePredicate, SerializableSupplier, etc).&amp;nbsp; All of the Stream methods have been overridden on the &lt;a href="https://docs.jboss.org/infinispan/9.0/apidocs/org/infinispan/CacheStream.html"&gt;CacheStream&lt;/a&gt; interface to take these arguments.&lt;br /&gt;&lt;br /&gt;This allows for the code to be much cleaner as we can see here:&lt;br /&gt;&lt;h3&gt;9.0 Distributed Streams Example&lt;/h3&gt;&lt;h3&gt;&lt;script src="https://gist.github.com/wburns/c5d7363eb78d934cb756e0650be062ce.js" type="text/javascript"&gt;&lt;/script&gt;Extra Methods&lt;/h3&gt;This is not the only benefit of providing the &lt;b&gt;CacheStream &lt;/b&gt;interface: we can also provide new methods that aren't available on the standard &lt;a href="https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html"&gt;Stream&lt;/a&gt; interface.&amp;nbsp; One example is the &lt;a href="https://docs.jboss.org/infinispan/9.0/apidocs/org/infinispan/CacheStream.html#forEach-org.infinispan.util.function.SerializableBiConsumer-"&gt;forEach&lt;/a&gt; method which allows the user to more easily provide a Cache that is injected on each node as required.&amp;nbsp; This way you don't have to use the clumsy &lt;a href="https://docs.jboss.org/infinispan/9.0/apidocs/org/infinispan/stream/CacheAware.html"&gt;CacheAware&lt;/a&gt; interface and can directly use lambdas as desired.&lt;br /&gt;&lt;br /&gt;Here is an example of the new &lt;b&gt;forEach&lt;/b&gt; method in action:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/wburns/0db406b988fc087a4e1e0f8f6481041f.js" type="text/javascript"&gt;&lt;/script&gt; In this example we take a cache and, based on the keys in it, write those values into another cache.  Since&lt;b&gt; forEach&lt;/b&gt; doesn't have to be side effect free, you can do whatever you want inside here.&lt;br /&gt;&lt;br /&gt;All in all these improvements should make using Distributed Streams with Infinispan much easier.&amp;nbsp; The extra methods could be extended further if users have use cases they would love to suggest.&amp;nbsp; Just let us know, and I hope you enjoy using Infinispan!&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/opBNt-uqO9w" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/7859244941475556914/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/distributed-stream-quality-of-life.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7859244941475556914" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7859244941475556914" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/opBNt-uqO9w/distributed-stream-quality-of-life.html" title="Distributed Stream Quality of Life Improvements" /><author><name>William Burns</name><uri>https://plus.google.com/112734869901288577754</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-J7pT8VaKi8w/AAAAAAAAAAI/AAAAAAAAADQ/pF4bvxphTic/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/distributed-stream-quality-of-life.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-8652333474784512280</id><published>2016-12-05T13:56:00.004-08:00</published><updated>2016-12-05T13:56:40.093-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="9.0" /><category scheme="http://www.blogger.com/atom/ns#" term="beta" /><category scheme="http://www.blogger.com/atom/ns#" term="marshalling" /><category scheme="http://www.blogger.com/atom/ns#" term="off-heap" /><category scheme="http://www.blogger.com/atom/ns#" term="performance" /><category scheme="http://www.blogger.com/atom/ns#" term="query" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Infinispan 9.0.0.Beta1 "Ruppaner"</title><content type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://design.jboss.org/infinispan/infinispan9/logo/final/infinispan9_pixelsizes_600.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://design.jboss.org/infinispan/infinispan9/logo/final/infinispan9_pixelsizes_600.gif" height="77" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;It took us quite a bit to get here, but we're finally ready to announce Infinispan 9.0.0.Beta1, which comes loaded with a ton of goodies.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Performance improvements &lt;/li&gt;&lt;ul&gt;&lt;li&gt;JGroups 4&lt;/li&gt;&lt;li&gt;A new algorithm for non-transactional writes (aka the Triangle) which reduces the number of RPCs required when performing writes&amp;nbsp;&lt;/li&gt;&lt;li&gt;A new faster internal marshaller which produced smaller payloads.&amp;nbsp;&lt;/li&gt;&lt;li&gt;A new asynchronous interceptor core&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Off-Heap support&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Avoid the size of the data in the caches affecting your GC times&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="https://github.com/ben-manes/caffeine"&gt;CaffeineMap&lt;/a&gt;-based bounded data container&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Superior performance&lt;/li&gt;&lt;li&gt;More reliable eviction&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Ickle, Infinispan's new query language&lt;/li&gt;&lt;ul&gt;&lt;li&gt;A limited yet powerful subset of JPQL&lt;/li&gt;&lt;li&gt;Supports full-text predicates&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;The Server Admin console now supports both Standalone and Domain modes &lt;/li&gt;&lt;ul&gt;&lt;/ul&gt;&lt;li&gt;Pluggable marshallers for Kryo and ProtoStuff&lt;/li&gt;&lt;li&gt;The LevelDB cache store has been replaced with the better-maintained and faster&amp;nbsp;&lt;a href="http://rocksdb.org/"&gt;RocksDB&lt;/a&gt;&amp;nbsp; &lt;/li&gt;&lt;li&gt;Spring Session support&lt;/li&gt;&lt;li&gt;Upgraded Spring to&amp;nbsp;4.3.4.RELEASE&lt;/li&gt;&lt;/ul&gt;We will be blogging about the above in detail over the coming weeks, including benchmarks and tutorials.&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;The following improvements were also present in our previous Alpha releases: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Graceful clustered shutdown / restart with persistent state &lt;/li&gt;&lt;li&gt;Support for streaming values over Hot Rod, useful when you are dealing with very large entries&lt;/li&gt;&lt;li&gt;Cloud and Containers&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Out-of-the box support for Kubernetes discovery &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Cache store improvements&lt;/li&gt;&lt;ul&gt;&lt;li&gt;The JDBC cache store now use transactions and upserts. Also the internal connection pool is now based on &lt;a href="https://brettwooldridge.github.io/HikariCP/"&gt;HikariCP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Also, our documentation has received a big overhaul and we believe it is vastly superior than before.&lt;br /&gt;&lt;br /&gt;There will be one more Beta including further performance improvements as well as additional features, so stay tuned.&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;Infinispan 9 is codenamed "Ruppaner" in honor of the &lt;a href="http://www.ruppaner-bodensee.de/die-brauerei/"&gt;Konstanz brewery&lt;/a&gt;, since many of the improvements of this release have been brewed on the shores of the Bodensee !&lt;br /&gt;&lt;br /&gt;Prost!&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/l-Td5HTz3GE" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/8652333474784512280/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/infinispan-900beta1-ruppaner.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8652333474784512280" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/8652333474784512280" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/l-Td5HTz3GE/infinispan-900beta1-ruppaner.html" title="Infinispan 9.0.0.Beta1 &quot;Ruppaner&quot;" /><author><name>Tristan Tarrant</name><uri>https://plus.google.com/107212596455518362860</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh4.googleusercontent.com/-vju6PV5EA0c/AAAAAAAAAAI/AAAAAAAAKr8/ABu9Ii4jylc/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/infinispan-900beta1-ruppaner.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-4984211490250460785</id><published>2016-12-05T03:42:00.000-08:00</published><updated>2016-12-08T01:42:12.034-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cache store" /><category scheme="http://www.blogger.com/atom/ns#" term="compose" /><category scheme="http://www.blogger.com/atom/ns#" term="docker" /><category scheme="http://www.blogger.com/atom/ns#" term="jdbc" /><category scheme="http://www.blogger.com/atom/ns#" term="modules" /><category scheme="http://www.blogger.com/atom/ns#" term="oracle" /><category scheme="http://www.blogger.com/atom/ns#" term="persistence" /><category scheme="http://www.blogger.com/atom/ns#" term="server" /><title type="text">Composing the Infinispan Docker image</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;In the &lt;a href="http://blog.infinispan.org/2016/10/infinispan-docker-image-custom.html" target="_blank"&gt;previous&lt;/a&gt; post we showed how to manipulate the Infinispan Docker container configuration at both runtime and boot time.&lt;br /&gt;&lt;br /&gt;Before diving into multi-host Docker usage, in this post we'll explore how to create multi-container Docker applications involving Infinispan with the help of &lt;a href="https://docs.docker.com/compose/" target="_blank"&gt;Docker Compose&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;For this we'll look at a typical scenario of an Infinispan server backed by an Oracle database as a cache store. &lt;br /&gt;&lt;br /&gt;All the code for this sample can be found on &lt;a href="https://github.com/gustavonalle/infinispan-docker-compose" target="_blank"&gt;github&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;&amp;nbsp;&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;Infinispan with Oracle JDBC cache store&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;&amp;nbsp;&lt;/h2&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;In order to have a cache with persistence with Oracle, we need to do some configuration: configure the driver in the server, create the data source associated with the driver, and configure the cache itself with JDBC persistence.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;Let's take a look at each of those steps:&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Obtaining and configuring the driver&lt;/h4&gt;&lt;div style="text-align: left;"&gt;The driver (ojdbc6.jar) should be &lt;a href="http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html" target="_blank"&gt;downloaded&lt;/a&gt; and placed in the 'driver' folder of the sample project.&lt;br /&gt;&lt;br /&gt;The module.xml declaration used to make it available on the server is as follows:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/http://github.com/gustavonalle/infinispan-docker-compose/blob/master/driver/module.xml"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Configuring the Data source &lt;/h4&gt;The data source is configured in the "datasource" element of the server configuration file as shown below:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/https://github.com/gustavonalle/infinispan-docker-compose/blob/master/custom/clustered-docker.xml?slice=110:144"&gt;&lt;/script&gt; &lt;br /&gt;and inside the "datasource/drivers" element, we need to declare the driver:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/https://github.com/gustavonalle/infinispan-docker-compose/blob/master/custom/clustered-docker.xml?slice=156:159"&gt;&lt;/script&gt;  &lt;br /&gt;&lt;h4&gt;Creating the cache &lt;/h4&gt;The last piece is to define a cache with the proper JDBC Store:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/https://github.com/gustavonalle/infinispan-docker-compose/blob/master/custom/clustered-docker.xml?slice=219:234"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Putting all together&lt;/h4&gt;From now on, without using Docker we'd be ready to download and install Oracle following the specific instructions for your OS, then download the Infinispan Server, edit the configuration files, copy over the driver jar, figure out how to launch the database and server, taking care not to have any port conflicts.&lt;br /&gt;&lt;br /&gt;If it sounds too much work, it's because it really is. Wouldn't it be nice to have all these wired together and launched with a simple command line? Let's take a look at the Docker way next.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;&lt;br /&gt;&amp;nbsp;&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;Enter Docker Compose&lt;/h2&gt;&lt;br /&gt;Docker Compose is a tool part of the Docker stack to facilitate configuration, execution and management of related Docker containers.&lt;br /&gt;&lt;br /&gt;By describing the application aspects in a single yaml file, it allows centralized control of the containers, including custom configuration and parameters, and it also allows runtime interactions with each of the exposed services.&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Composing Infinispan&lt;/h4&gt;Our Docker Compose file to assemble the application is given below:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/https://github.com/gustavonalle/infinispan-docker-compose/blob/master/docker-compose.yaml"&gt;&lt;/script&gt; It contains two services:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;one called &lt;b&gt;&lt;i&gt;oracle&lt;/i&gt;&lt;/b&gt; that uses the &lt;a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/" target="_blank"&gt;wnameless/oracle-xe-11g&lt;/a&gt; Docker image, with an environment variable to allow remote connections.&lt;/li&gt;&lt;li&gt;&amp;nbsp;another one called &lt;i&gt;&lt;b&gt;infinispan&lt;/b&gt;&lt;/i&gt; that uses version 8.2.5.Final of the &lt;a href="https://store.docker.com/community/images/jboss/infinispan-server" target="_blank"&gt;Infinispan Server image&lt;/a&gt;. It is launched with a custom command pointing to the changed configuration file and it also mounts two volumes in the container: one for the driver and its module.xml and another for the folder holding our server xml configuration.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Launching&lt;/h4&gt;To start the application, just execute&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/2b572c1f0ee769050cc0a1fbc63db552.js"&gt;&lt;/script&gt;&lt;br /&gt;To inspect the status of the containers:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/4fa11c8bf6459a09b00d0c40df89815b.js"&gt;&lt;/script&gt;&lt;br /&gt;To follow the Infinispan server logs, use:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/90b10e79a0c9ae8afd19a91e3a2b590a.js"&gt;&lt;/script&gt;&lt;br /&gt;Infinispan usually starts faster than the database, and since the server waits until the database is ready (more on that later), keep an eye in the log output for "Infinispan Server 8.2.5.Final (WildFly Core 2.0.10.Final) started". After that, both Infinispan and Oracle are properly initialized.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Testing it&lt;/h4&gt;Let's insert a value using the Rest endpoint from Infinispan and verify it was saved to the Oracle database:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/564b73f0e576170cce376e8dd85e5a4b.js"&gt;&lt;/script&gt;&lt;br /&gt;To check the Oracle database, we can attach to the container and use Sqlplus:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/05cce0dd1d6c19ca3a634b5a68e66630.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Other operations&lt;/h4&gt;&lt;br /&gt;It's also possible to increase and decrease the number of containers for each of the services:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gustavonalle/28c6d03688bed632ed9adb558d6c92a0.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;A thing or two about startup order&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;&amp;nbsp;&lt;/h2&gt;When dealing with dependent containers in Docker based environments, it's highly recommended to make the connection obtention between parties robust enough so that the fact that one dependency is not totally initialized doesn't cause the whole application to fail when starting. &lt;br /&gt;&lt;br /&gt;Although Compose does have a &lt;b&gt;&lt;i&gt;depends_on&lt;/i&gt;&lt;/b&gt; instruction, it simply starts the containers in the declared order but it has no means to detected when a certain container is fully initialized and ready to serve requests before launching a dependent one.&lt;br /&gt;&lt;br /&gt;One may be tempted to simply write some glue script to detect if a certain port is open, but that does not work in practice: the network socket may be opened, but the background service could still be in transient initialization state. &lt;br /&gt;&lt;br /&gt;The recommended solution for this it to make whoever depends on a service to retry periodically until the dependency is ready. On the Infinispan + Oracle case, we specifically configured the data source with retries to avoid failing at once if the database is not ready:&lt;br /&gt;&lt;br /&gt;&lt;script src="http://gist-it.appspot.com/https://github.com/gustavonalle/infinispan-docker-compose/blob/master/custom/clustered-docker.xml?slice=133:140"&gt;&lt;/script&gt; When starting the application via Compose you'll notice that Infinispan print some WARN with connection exceptions until Oracle is available: don't panic, this is expected!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Conclusion&lt;/h2&gt;&lt;br /&gt;Docker Compose is a powerful and easy to use tool to launch applications involving multiple containers: in this post it allowed to start Infinispan plus Oracle with custom configurations with a single command.&lt;br /&gt;It's also a handy tool to have during development and testing phase of a project, specially when using/evaluating Infinispan with its many possible integrations.&lt;br /&gt;&lt;br /&gt;Be sure to check other examples of using Docker Compose involving Infinispan: the &lt;a href="https://github.com/infinispan/infinispan-spark/tree/master/examples/twitter" target="_blank"&gt;Infinispan+Spark Twitter demo&lt;/a&gt;, and the &lt;a href="https://github.com/infinispan/infinispan-hadoop/tree/master/samples/flink" target="_blank"&gt;Infinispan+Apache Flink&lt;/a&gt; demo.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/O3FEQ8jxdwo" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/4984211490250460785/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/12/composing-infinispan-docker-image.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/4984211490250460785" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/4984211490250460785" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/O3FEQ8jxdwo/composing-infinispan-docker-image.html" title="Composing the Infinispan Docker image" /><author><name>Gustavo Fernandes</name><uri>https://plus.google.com/102351630196346863289</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/12/composing-infinispan-docker-image.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-5448666522072528824</id><published>2016-11-28T04:33:00.002-08:00</published><updated>2016-11-28T04:45:26.727-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="9.0" /><category scheme="http://www.blogger.com/atom/ns#" term="spring" /><title type="text">Spring as a Spec?</title><content type="html">&lt;div style="text-align: justify;"&gt;We've been maintaining Spring integrations bits in Infinispan for quite a while. Our development version, Infinispan 9, contains a set of changes in those modules which deserve some explanation...&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Versions... versions everywhere...&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-RaDzYHbGJIw/WDggizSIitI/AAAAAAAAHy0/KsU26P5tphgZ87cmUpOMFYML3ERttCaAACLcB/s1600/versions.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="243" src="https://1.bp.blogspot.com/-RaDzYHbGJIw/WDggizSIitI/AAAAAAAAHy0/KsU26P5tphgZ87cmUpOMFYML3ERttCaAACLcB/s320/versions.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;When you use Infinispan, you rely on some, very specific version. The same applies to Spring. Before Infinispan 9 our integration modules had a compile-time dependency to a very specific version of Spring. In practice, we imposed this specific version to each project which used our integration bits. The question is - what to do to use some other version of Spring or Spring Boot? Till Infinispan 9, the simplest solution was to exclude Spring from &lt;i&gt;infinispan-spring4-embedded&lt;/i&gt; (or &lt;i&gt;infinispan-spring4-remote&lt;/i&gt;) artifact using &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html" target="_blank"&gt;Maven exclusions&lt;/a&gt;. Not a very nice and intuitive solution was it?&lt;/div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;How about treating Spring as a Spec or API&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;You probably noticed, when you use JPA you don't care about underlying implementation. Is it Hibernate, OpenJPA... it doesn't matter?&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;If you think carefully about Spring for a while, it's a bit similar. All core classes might be delivered using standard dependency mechanism (adding spring-beans,&amp;nbsp;spring-context manually), using Spring Boot (adding spring-boot-starter) or even using 3rd party integration tools like DropWizard. In case of a bigger project, a decision whether or not use any of those solutions needs to be taken long before Infinispan is chosen as a Distributed Store or Cache.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;At this point, we can do a mental experiment - treat Spring classes as a Spec or API and those delivery mechanisms treat as implementations.&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;Scope? Provided, of course!&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;From Infinispan integration perspective we need the Spring API (the classes) and we don't care about the implementation (delivery mechanism). Having this in mind we &lt;a href="https://github.com/infinispan/infinispan/commit/76a584bce3566fd855a9629cb3ad9164461c3c45" target="_blank"&gt;decided to change Spring's scope in Infinispan modules to provided&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;I use Infinispan and Spring, what shall I do?&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Starting from Infinispan 9, you can stop using exclusions. You probably already use Spring and your favorite delivery mechanism (Spring Boot for example). Then add &lt;i&gt;infinispan-spring4-embedded&lt;/i&gt; or &lt;i&gt;infinispan-spring4-remote&lt;/i&gt; artifact. Finally, you need to decide how would you like to use Infinispan - via Uber Jars (&lt;i&gt;infinispan-embedded&lt;/i&gt; and &lt;i&gt;infinispan-remote&lt;/i&gt;) or using Small Jars (&lt;i&gt;infinispan-core&lt;/i&gt; for example).&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;That's it! Have fun!&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/Xlpu0Y5Uxx8" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/5448666522072528824/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/11/spring-as-spec.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/5448666522072528824" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/5448666522072528824" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/Xlpu0Y5Uxx8/spring-as-spec.html" title="Spring as a Spec?" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-RaDzYHbGJIw/WDggizSIitI/AAAAAAAAHy0/KsU26P5tphgZ87cmUpOMFYML3ERttCaAACLcB/s72-c/versions.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/11/spring-as-spec.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-7233963426325356482</id><published>2016-11-16T02:13:00.001-08:00</published><updated>2016-11-19T10:52:58.532-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="8.2" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Infinispan 8.2.5.Final</title><content type="html">Dear Infinispan users,&lt;br /&gt;&lt;br /&gt;we have just released Infinispan 8.2.5.Final which fixes a number of &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12331268"&gt;community-reported issues&lt;/a&gt;. Get the bits from our &lt;a href="http://infinispan.org/download/#stable"&gt;download page&lt;/a&gt;. As usual feedback is always welcome.&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/0zVRIszsjUM" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/7233963426325356482/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/11/infinsipan-825final.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7233963426325356482" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/7233963426325356482" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/0zVRIszsjUM/infinsipan-825final.html" title="Infinispan 8.2.5.Final" /><author><name>Tristan Tarrant</name><uri>https://plus.google.com/107212596455518362860</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh4.googleusercontent.com/-vju6PV5EA0c/AAAAAAAAAAI/AAAAAAAAKr8/ABu9Ii4jylc/s512-c/photo.jpg" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/11/infinsipan-825final.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-3732944812075012386</id><published>2016-11-11T06:12:00.002-08:00</published><updated>2016-11-11T06:12:32.865-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="c#" /><category scheme="http://www.blogger.com/atom/ns#" term="c++" /><category scheme="http://www.blogger.com/atom/ns#" term="cpp-client" /><category scheme="http://www.blogger.com/atom/ns#" term="dotnet-client" /><category scheme="http://www.blogger.com/atom/ns#" term="hotrod" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Hotrod clients C++/C# 8.1.0.Alpha2 released!</title><content type="html">Dear Infinispan community,&lt;br /&gt;&lt;br /&gt;I'm pleased to announce that the C++/C# clients version 8.1.0.Alpha2 are out!&lt;br /&gt;&lt;br /&gt;Some of the good news coming with this release: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;more bugs fixed than added &lt;/li&gt;&lt;li&gt;SNI support&lt;/li&gt;&lt;li&gt;C++ Client listener for remote events &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Download it from the usual link&lt;a href="http://infinispan.org/hotrod-clients/" target="_blank"&gt; http://infinispan.org/hotrod-clients/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We're trying to keep track of the 8.1 trip at this Jira url:&lt;br /&gt;&lt;a href="https://issues.jboss.org/browse/HRCPP-289"&gt;Features list for 8.1&lt;/a&gt;&lt;br /&gt;Feedbacks, proposals, hints are welcome!&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;The Infinispan Team&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/p6dvSEMGYt8" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/3732944812075012386/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/11/hotrod-clients-cc-810alpha2-released.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3732944812075012386" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3732944812075012386" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/p6dvSEMGYt8/hotrod-clients-cc-810alpha2-released.html" title="Hotrod clients C++/C# 8.1.0.Alpha2 released!" /><author><name>rigazilla</name><uri>http://www.blogger.com/profile/04086218083589623172</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/11/hotrod-clients-cc-810alpha2-released.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-5710218854284613154</id><published>2016-11-02T07:39:00.000-07:00</published><updated>2016-11-02T07:40:04.379-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="conference" /><category scheme="http://www.blogger.com/atom/ns#" term="devoxx" /><title type="text">Infinispan coming to Devoxx Morocco!</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;span style="background-color: white; color: #4c4c4c; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;trebuchet ms&amp;quot; , &amp;quot;trebuchet&amp;quot; , &amp;quot;verdana&amp;quot; , sans-serif; font-size: 13px;"&gt;Tomorrow Thursday, 3rd November, I'll be speaking at the Devoxx Morocco conference (Casablanca, Morocco) about&amp;nbsp;&lt;/span&gt;&lt;a href="https://cfp.devoxx.ma/2016/talk/OQC-3967/Learn_how_to_build_Functional_Reactive_Applications_with_Elm,_Node.js_and_Infinispan" style="color: #431609; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;writing apps in functional reactive programming style with Infinispan, Elm and Node.js&lt;/a&gt;&lt;span style="background-color: white; color: #4c4c4c; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;trebuchet ms&amp;quot; , &amp;quot;trebuchet&amp;quot; , &amp;quot;verdana&amp;quot; , sans-serif; font-size: 13px;"&gt;. If you're interested in the topic and live in the area, make sure you come to my talk!&lt;/span&gt;&lt;br /&gt;&lt;div style="color: #4c4c4c; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="color: #4c4c4c; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;To find out more, head to the &lt;a href="https://devoxx.ma/"&gt;Devoxx Morocco site&lt;/a&gt;, where you can find exact details about the rest of the&amp;nbsp;&lt;a href="https://cfp.devoxx.ma/2016/index.html"&gt;programme&lt;/a&gt;, location...etc.&lt;/div&gt;&lt;div style="color: #4c4c4c; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="color: #4c4c4c; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;Cheers,&lt;/div&gt;&lt;div style="color: #4c4c4c; font-family: Helvetica, 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 13px;"&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/9mtXyvJJqis" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/5710218854284613154/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/11/infinispan-coming-to-devoxx-morocco.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/5710218854284613154" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/5710218854284613154" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/9mtXyvJJqis/infinispan-coming-to-devoxx-morocco.html" title="Infinispan coming to Devoxx Morocco!" /><author><name>Galder Zamarreño</name><uri>http://www.blogger.com/profile/07902530246353017161</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/11/infinispan-coming-to-devoxx-morocco.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-6156455781570179027</id><published>2016-10-28T03:57:00.000-07:00</published><updated>2016-10-28T03:57:45.988-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cli" /><category scheme="http://www.blogger.com/atom/ns#" term="configuration" /><category scheme="http://www.blogger.com/atom/ns#" term="docker" /><category scheme="http://www.blogger.com/atom/ns#" term="server" /><title type="text">Infinispan Docker image: custom configuration</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;In the &lt;a href="http://blog.infinispan.org/2016/07/improved-infinispan-docker-image.html" target="_blank"&gt;previous post&lt;/a&gt; we introduced the improved Docker image for Infinispan and showed how to run it with different parameters in order to create standalone, clustered and domain mode servers. &lt;br /&gt;&lt;br /&gt;This post will show how to address more advanced configuration changes than swapping the JGroups stack, covering cases like creating extra caches or using a pre-existent configuration file.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;Runtime configuration changes&lt;/span&gt;&lt;/h3&gt;&lt;br /&gt;Since the Infinispan server is based on Wildfly, it also supports the Command Line Interface (CLI) to change configurations at runtime.&lt;br /&gt;&lt;br /&gt;Let's consider an example of a custom indexed cache with Infinispan storage. In order to configure it, we need 4 caches, one cache to hold our data, called &lt;i&gt;testCache&lt;/i&gt; and other three caches to hold the indexes:&amp;nbsp; &lt;i&gt;LuceneIndexesMetadata&lt;/i&gt;, &lt;i&gt;LuceneIndexesData&lt;/i&gt; and &lt;i&gt;LuceneIndexesLocking&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;This is normally achieved by adding this piece of configuration to the server xml:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/a93176d876baf845feb8b901f247883d.js"&gt; &lt;/script&gt; This is equivalent to the following script:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/5b590e454076a49e8a78bee1643accb2.js"&gt; &lt;/script&gt; &lt;br /&gt;To apply it to the server, save the script to a file, and run:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/effe2bc1efbf7191a6888e8aa0b21c2c.js"&gt; &lt;/script&gt;where CONTAINER is the id of the running container.&lt;br /&gt;&lt;br /&gt;Everything that is applied using the CLI is automatically persisted in the server, and to check what the script produced, use the command to dump the config to a local file called &lt;i&gt;config.xml.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/78653483fc95b0a4c2da4e30adf9fb0c.js"&gt; &lt;/script&gt;Check the file &lt;i&gt;config.xml&lt;/i&gt;: it should contain all four caches created via the CLI.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;&amp;nbsp;Using an existent configuration file&lt;/span&gt;&lt;/h3&gt;&lt;br /&gt;Most of the time changing configuration at runtime is sufficient, but it may be desirable to run the server with an existent xml, or change configurations that cannot be applied without a restart. For those cases, the easier option is to mount a volume in the Docker container and start the container with the provided configuration.&lt;br /&gt;&lt;br /&gt;This can be achieved with Docker's volume support. Consider an xml file called &lt;i&gt;customConfig.xml&lt;/i&gt; located on a local folder &lt;i&gt;/home/user/config&lt;/i&gt;. The following command:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/b214f354f5576c1f461c7bebaacf8b2d.js"&gt; &lt;/script&gt; will create a volume inside the container at the &lt;i&gt;/opt/jboss/infinispan-server/standalone/configuration/extra/&lt;/i&gt; directory, with the contents of the local folder &lt;i&gt;/home/user/config&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;The container is then launched with the entrypoint &lt;i&gt;extra/customConfig&lt;/i&gt;, which means it will use a configuration named &lt;i&gt;customConfig&lt;/i&gt; located under the &lt;i&gt;extra&lt;/i&gt; folder relative to where the configurations are usually located at&lt;i&gt; /opt/jboss/infinispan-server/standalone/configuration&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="color: #990000;"&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;&lt;br /&gt;And that's all about custom configuration using the Infinispan Docker image.&lt;br /&gt;&lt;br /&gt;Stay tuned for the next post where we'll dive into multi-host clusters with the Infinispan Docker image.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/5nJJylS3ddk" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/6156455781570179027/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/10/infinispan-docker-image-custom.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6156455781570179027" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6156455781570179027" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/5nJJylS3ddk/infinispan-docker-image-custom.html" title="Infinispan Docker image: custom configuration" /><author><name>Gustavo Fernandes</name><uri>https://plus.google.com/102351630196346863289</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/10/infinispan-docker-image-custom.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-1165504291115572387</id><published>2016-10-27T01:56:00.000-07:00</published><updated>2016-10-27T01:56:04.246-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="conference" /><title type="text">Learn Functional Reactive Programming with Infinispan, Elm and Node.js at Soft-Shake conference</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Tomorrow Friday, 28th October, I'll be speaking at the Soft-Shake conference (Geneva, Switzerland) about &lt;a href="http://www.kora.li/admin.html#/index/p?u=galderz&amp;amp;s=galderz&amp;amp;c=softshake&amp;amp;e=Donkey_Kong"&gt;writing apps in functional reactive programming style with Infinispan, Elm and Node.js&lt;/a&gt;. If you're interested in the topic and live in the area, make sure you come to my talk!&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To find out more, head to the &lt;a href="http://soft-shake.ch/2016/fr/index.html#intro"&gt;Soft-Shake site&lt;/a&gt;, where you can find exact details about the rest of the &lt;a href="http://www.kora.li/admin.html#/index/program?c=softshake"&gt;programme&lt;/a&gt;, location...etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/qk-ekfYiXKs" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/1165504291115572387/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/10/learn-functional-reactive-programming.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/1165504291115572387" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/1165504291115572387" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/qk-ekfYiXKs/learn-functional-reactive-programming.html" title="Learn Functional Reactive Programming with Infinispan, Elm and Node.js at Soft-Shake conference" /><author><name>Galder Zamarreño</name><uri>http://www.blogger.com/profile/07902530246353017161</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/10/learn-functional-reactive-programming.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-3808154661837147870</id><published>2016-10-13T06:40:00.000-07:00</published><updated>2016-10-13T06:41:31.067-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="affinity" /><category scheme="http://www.blogger.com/atom/ns#" term="openshift" /><title type="text">OpenShift and Node Affinity</title><content type="html">OpenShift (and Kubernetes) has a great feature called &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html#affinity" target="_blank"&gt;Affinity&lt;/a&gt;. In some scenarios, it might be beneficial to configure it along with &lt;a href="http://infinispan.org/docs/stable/user_guide/user_guide.html#ServerHinting" target="_blank"&gt;Infinispan node affinity&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Before we start... this tutorial is heavily based on our &lt;a href="http://blog.infinispan.org/2016/08/running-infinispan-cluster-on-openshift.html" target="_blank"&gt;previous blog post about deploying Infinispan on Openshift&lt;/a&gt;&amp;nbsp;and OpenShift &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html" target="_blank"&gt;Scheduler functionality&lt;/a&gt;. It is highly recommended to read those articles before continuing this tutorial.&lt;br /&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;How does the Affinity feature work... in short?&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In order to decide on which node given Pod should be running, OpenShift looks at so called &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html#configurable-predicates" target="_blank"&gt;Predicates&lt;/a&gt; and &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html#available-priority-functions" target="_blank"&gt;Priority Functions&lt;/a&gt;. A predicate must match the one configured in &lt;i&gt;DeploymentConfiguration&lt;/i&gt; and Priority Function is responsible for choosing the best node for running Pods.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's assume that we have a sample policy (similar to &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html#scheduler-sample-policies" target="_blank"&gt;one provided in OpenShift manual&lt;/a&gt;), that uses &lt;i&gt;site &lt;/i&gt;as a Predicate along with&amp;nbsp;&lt;i&gt;rack and machine&lt;/i&gt; as Priority Functions. Now let's assume we have two nodes:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Node 1 - site=EU, rack=R1, machine=VM1&lt;/li&gt;&lt;li&gt;Node 2 - site=US, rack=R2, machine=VM2&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;And two DeploymentConfiguration with Node Selectors (this tells OpenShift on which nodes given &lt;i&gt;DeploymentConfiguration&lt;/i&gt; wishes to run) defined as follows:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;DeploymentConfiguration 1 - site=EU, rack=R5, machine=VM5&lt;/li&gt;&lt;li&gt;DeploymentConfiguration 2 - site=JAP, rack=R5, machine=VM5&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;With the above example only DeploymentConfiguration 1 will be scheduled (on Node 1), since &lt;i&gt;site&lt;/i&gt; matches the predicate. In this case &lt;i&gt;rack&lt;/i&gt; and &lt;i&gt;machine&lt;/i&gt; parameters are not used (because we have only one node).&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Note that the default OpenShift's configuration uses &lt;i&gt;region&lt;/i&gt; (as a Predicate) and &lt;i&gt;zone&lt;/i&gt; (as a Priority Function). However it can be reconfigured &lt;a href="https://docs.openshift.org/latest/admin_guide/scheduler.html" target="_blank"&gt;very easily&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;And I need it because....&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some OpenShift deployments might span multiple racks in a data center or even multiple sites. It is important to tell Infinispan where physical machines are located, which will allow to choose better nodes for backing up your data (in distribution mode).&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As the matter of fact, Infinispan uses &lt;i&gt;site&lt;/i&gt;, &lt;i&gt;rack&lt;/i&gt; and &lt;i&gt;machine&lt;/i&gt;. The main goal is to avoid backing up data on the same host&lt;i&gt;.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;The implementation&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The implementation is pretty straightforward but there are several gotchas.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first one is that OpenShift uses &lt;i&gt;regions&lt;/i&gt; and &lt;i&gt;zones&lt;/i&gt; by default and Infinispan uses &lt;i&gt;sites&lt;/i&gt;, &lt;i&gt;racks&lt;/i&gt; and &lt;i&gt;machines&lt;/i&gt;. The good news is that all those three are optional, so you have two options - reuse existing &lt;i&gt;region&lt;/i&gt; and &lt;i&gt;zone&lt;/i&gt; (map them to rack and site for example)&lt;i&gt;,&lt;/i&gt; or adjust OpenShift scheduler settings. In my example I used the former approach.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The second one is the need of hardcoding those parameters into &lt;i&gt;DeploymentConfiguration&lt;/i&gt;. Unfortunately Node Selectors are not exposed through &lt;a href="http://kubernetes.io/docs/user-guide/downward-api/" target="_blank"&gt;Downward API&lt;/a&gt;, so there's no other way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So let's have a look at our DeploymentConfiguration:&lt;/div&gt;&lt;div&gt;&lt;script src="https://gist.github.com/slaskawi/7791972ac7fa2d792ee67b865d52f2d8.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Line 26 - Zone &lt;i&gt;default&lt;/i&gt; used as a rack&lt;/li&gt;&lt;li&gt;Line 27 - Region &lt;i&gt;primary&lt;/i&gt; used as a site&lt;/li&gt;&lt;li&gt;Lines 57 - 59 - Node Selector for scheduling Pods&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Combining OpenShift Affinity Service and Infinispan Server Hinting allows to optimize data distribution across the cluster. Keep in mind that your configuration might be totally different (OpenShift Scheduler is a highly configurable thing). But once you understand how it works, you can adjust the hinting strategy for your needs.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Happy Scaling!&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/uMqayPzcTNs" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/3808154661837147870/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/10/openshift-and-node-affinity.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3808154661837147870" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/3808154661837147870" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/uMqayPzcTNs/openshift-and-node-affinity.html" title="OpenShift and Node Affinity" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/10/openshift-and-node-affinity.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-6101441236279944854</id><published>2016-10-11T00:20:00.001-07:00</published><updated>2016-10-11T00:20:06.201-07:00</updated><title type="text">Microservices with Wildfly Swarm and Infinispan</title><content type="html">Everybody loves Microservices, right?&lt;br /&gt;&lt;br /&gt;Today, all of us have slightly different understanding what Microservices are but, among all those definitions and attributes, there's probably one thing that fits them all - they need to be &lt;u&gt;simple&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;So let's have a look at some practical example of creating a REST service with Infinispan as a storage wired together using CDI. We will use &lt;a href="http://wildfly-swarm.io/" target="_blank"&gt;Wildfly Swarm&lt;/a&gt; as a running platform.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Bootstrapping new project&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;A good way to start a new Wildfly Swarm project is to &lt;a href="http://wildfly-swarm.io/generator/" target="_blank"&gt;generate it&lt;/a&gt;. The only requirement here is to add "JAX-RS with CDI" and "JPA" as dependencies.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next step is to add &lt;i&gt;infinispan-embedded&lt;/i&gt; artifact. The final &lt;i&gt;pom.xml&lt;/i&gt; should look like the following:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src="https://gist.github.com/slaskawi/e827c8f02d278779dadf08d9ed2583df.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Writing some code&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;&lt;a href="http://infinispan.org/docs/dev/user_guide/user_guide.html#cdi_support" target="_blank"&gt;Infinispan CDI Extension&lt;/a&gt; will take care of bootstrapping Infinispan, so we can dive directly into JAX-RS code:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src="https://gist.github.com/slaskawi/72d3e6d274a39c9d52194db812be8682.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src="https://gist.github.com/slaskawi/8a8cce7965c2c6177e1e4b5d5814c43f.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And that's it!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;What's next?&lt;/h2&gt;&lt;br /&gt;&lt;div&gt;If you'd like to have a look at the complete example, check out&amp;nbsp;&lt;a href="https://github.com/slaskawi/infinispan-wf-swarm-example" target="_blank"&gt;my repository&lt;/a&gt;. The code is based on fresh build from Infinispan master branch which contains lots of improvements for CDI. You might build it yourself or just wait for &lt;i&gt;9.0.0.Beta1&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Have a lot of fun with Microservices!&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/xf4tBDdIUI4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/6101441236279944854/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/10/microservices-with-wildfly-swarm-and.html#comment-form" title="1 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6101441236279944854" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6101441236279944854" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/xf4tBDdIUI4/microservices-with-wildfly-swarm-and.html" title="Microservices with Wildfly Swarm and Infinispan" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><thr:total>1</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/10/microservices-with-wildfly-swarm-and.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-30544979481083473</id><published>2016-09-02T03:51:00.000-07:00</published><updated>2016-09-02T03:51:46.859-07:00</updated><title type="text">Configuration management on OpenShift, Kubernetes and Docker</title><content type="html">When deploying Infinispan on Docker based Cloud environments, the most critical thing is how to manage configuration. In this blog post we'll explore some of the options.&lt;br /&gt;&lt;h4&gt;Extending our Docker image&lt;/h4&gt;&lt;div&gt;Creating your own Docker image based on jboss/infinispan-server is quite simple. At first you need to prepare a configuration XML file, which is shipped with Infinispan release. Go to&amp;nbsp;&lt;a href="http://infinispan.org/download/" target="_blank"&gt;Infinispan download section&lt;/a&gt;&amp;nbsp;and grap a server release corresponding to a chosen Docker image tag. &amp;nbsp;After unpacking it, grab the configuration (I use cloud.xml as a template) and introduce all necessary changes.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, build your image:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/4be7ed35fc3f67647f05fff35dae8a99.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now, that was quick! Wasn't it?&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Using ConfigMaps with OpenShift&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;If you're using &lt;a href="https://www.openshift.org/" target="_blank"&gt;OpenShift&lt;/a&gt;, there's a sophisticated tool called &lt;a href="https://docs.openshift.org/latest/dev_guide/configmaps.html" target="_blank"&gt;ConfigMap&lt;/a&gt;. A ConfigMap can store a configuration file (or a configuration directory) and mount it somewhere in the Pod.&lt;br /&gt;&lt;br /&gt;Use the command below to create a ConfigMap based on a configuration file:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/176e11876949b45501372c1d33152ba3.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;br /&gt;Now create Infinispan application based on the configuration below (you can use 'oc create -f &amp;lt;file.yaml&amp;gt;' for this):&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/08f30e3d73eac0b71de8a633e9911fee.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;(lines 50 - 52) - ConfigMap volume declaration&lt;/li&gt;&lt;li&gt;(lines 45 - 47) - Mounting configuration into&amp;nbsp;&lt;i&gt;/opt/jboss/infinispan-server/standalone/configuration/custom&lt;/i&gt;&lt;/li&gt;&lt;li&gt;(line 22) - bootstrapping the Infinispan with custom configuration (note there is no xml extension there)&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Using ConfigMaps with Kubernetes&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;Kubernetes &lt;a href="http://kubernetes.io/docs/user-guide/configmap/" target="_blank"&gt;ConfigMaps&lt;/a&gt; work exactly the same way as in OpenShift.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The command below creates a ConfigMap:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/f7a5b3437f39abbf689dfeabd5773b66.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;The second step is to create a Deployment with ConfigMap:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/e863c3633986e84ad93d3c896012381c.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Conclusion&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;If you're using any Docker orchestration tool - have a look at provided tools. OpenShift and Kubernetes ConfigMaps are really great for this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;However if you need a fine grained control - either extend our Docker image (this is the preferred way) or simply fork and modify it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Happy configuring and scaling!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/KDjnX-1262k" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/30544979481083473/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/09/configuration-management-on-openshift.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/30544979481083473" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/30544979481083473" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/KDjnX-1262k/configuration-management-on-openshift.html" title="Configuration management on OpenShift, Kubernetes and Docker" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/09/configuration-management-on-openshift.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-161784789766810714</id><published>2016-09-01T02:58:00.001-07:00</published><updated>2016-09-01T02:58:27.755-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="c#" /><category scheme="http://www.blogger.com/atom/ns#" term="c++" /><category scheme="http://www.blogger.com/atom/ns#" term="cpp-client" /><category scheme="http://www.blogger.com/atom/ns#" term="dotnet-client" /><category scheme="http://www.blogger.com/atom/ns#" term="hotrod" /><category scheme="http://www.blogger.com/atom/ns#" term="release" /><title type="text">Hotrod clients C/C# 8.0.0.Final released!</title><content type="html">Dear Infinispan community,&lt;br /&gt;I'm glad to announce the Final release of the C++ and C# clients version 8.0.0.&lt;br /&gt;&lt;br /&gt;You can find the download on the Infinispan web site:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://infinispan.org/hotrod-clients/" target="_blank"&gt;http://infinispan.org/hotrod-clients/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Major new features for this release are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;queries&lt;/li&gt;&lt;li&gt;remote script execution&lt;/li&gt;&lt;li&gt;asynchronous operation (C++ only)&lt;/li&gt;&lt;/ul&gt;plus several minor and internal updates that partially fill the gap between C++/C# and the Java client.&lt;br /&gt;&lt;br /&gt;Some posts about the 8 serie of the C++/C# clients have been already published on this blog, you can recall them clicking through the list below.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://blog.infinispan.org/2016/06/hotrod-c-native-client-8-series.html" target="_blank"&gt;HotRod C++ Native Client 8 Series&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://blog.infinispan.org/2016/07/remote-execution-with-c-client.html" target="_blank"&gt;Remote Execution with C++ client&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="http://blog.infinispan.org/2016/08/infinispan-queries-with-c-client.html" target="_blank"&gt;Infinispan queries with C++ client&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;The equivalent C# examples are collected here:&lt;br /&gt;&lt;br /&gt;&lt;a href="https://github.com/rigazilla/dotnet-client-examples" target="_blank"&gt;https://github.com/rigazilla/dotnet-client-examples&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/PMR9f_Lixzw" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/161784789766810714/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/09/hotrod-clients-cc-800final-released.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/161784789766810714" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/161784789766810714" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/PMR9f_Lixzw/hotrod-clients-cc-800final-released.html" title="Hotrod clients C/C# 8.0.0.Final released!" /><author><name>rigazilla</name><uri>http://www.blogger.com/profile/04086218083589623172</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img1.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/09/hotrod-clients-cc-800final-released.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-5717179571414330874.post-6707507324892990682</id><published>2016-08-18T02:27:00.000-07:00</published><updated>2016-08-31T01:28:46.623-07:00</updated><title type="text">Running Infinispan cluster on Kubernetes</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;In the &lt;a href="http://blog.infinispan.org/2016/08/running-infinispan-cluster-on-openshift.html" target="_blank"&gt;previous post&lt;/a&gt; we looked how to run Infinispan on OpenShift. Today, our goal is exactly the same, but we'll focus on Kubernetes.&lt;br /&gt;&lt;br /&gt;Running Infinispan on Kubernetes requires using proper discovery protocol. This blog post uses &lt;a href="https://github.com/jgroups-extras/jgroups-kubernetes" target="_blank"&gt;Kubernetes Ping&lt;/a&gt; but it's also possible to use &lt;a href="http://blog.infinispan.org/2016/07/improved-infinispan-docker-image.html" target="_blank"&gt;Gossip Router&lt;/a&gt;.&lt;br /&gt;&lt;h4&gt;Our goal&lt;/h4&gt;&lt;div&gt;We'd like to build Infinispan cluster based on Kubernetes hosted locally (using &lt;a href="https://github.com/kubernetes/minikube" target="_blank"&gt;Minikube&lt;/a&gt;). We will expose a service and route it to our local machine. Finally, we will use it to put data into the grid.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-SxPVOKzEEH8/V62_FFizzhI/AAAAAAAAHI8/ARH6rBWLOtwwibGis3djKZk9vCDAvFipgCLcB/s1600/Infinispan%2B%252B%2BKubernetes.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="https://2.bp.blogspot.com/-SxPVOKzEEH8/V62_FFizzhI/AAAAAAAAHI8/ARH6rBWLOtwwibGis3djKZk9vCDAvFipgCLcB/s320/Infinispan%2B%252B%2BKubernetes.png" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Spinning local Kubernetes cluster&lt;/h4&gt;&lt;div&gt;There are many ways to spin up a local Kubernetes cluster. One of my favorites is &lt;a href="https://github.com/kubernetes/minikube" target="_blank"&gt;Minikube&lt;/a&gt;. At first you will need the 'minikube' binary, which can be downloaded from &lt;a href="https://github.com/kubernetes/minikube/releases" target="_blank"&gt;Github releases page&lt;/a&gt;. I usually copy it into '/usr/bin' which makes it very convenient to use. The next step is to download 'kubectl' binary. I usually use Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/releases" target="_blank"&gt;Github releases page&lt;/a&gt; for this. The 'kubectl' binary is stored inside the release archive under 'kubernetes/platforms/&amp;lt;your_platform&amp;gt;/&amp;lt;your_architecture&amp;gt;/kubectl'. I'm using linux/amd64 since I'm running Fedora F23. I also copy the binary to '/usr/bin'.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We are ready to spin up Kubernetes:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/b220d4d3218a069d892f866f33b8bbb9.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Deploying Infinispan cluster&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;This time we'll focus on automation, so there will be no 'kubectl edit' commands. Below is the yaml file for creating all necessary components in Kubernetes cluster:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/eb091536b1787f1464f954b64f9c9772.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;(lines 23 - 24) - We added additional arguments to the bootstrap scipt&lt;/li&gt;&lt;li&gt;(lines 26 - 30) - We used Downward API for pass the current namespace to the Infinispan&lt;/li&gt;&lt;li&gt;(lines 34 - 45) - We defined all ports used by the Pod&lt;/li&gt;&lt;li&gt;(lines 49 - 66) - We created a service for port 8080 (the REST interface)&lt;/li&gt;&lt;li&gt;(line 64) - We used &lt;a href="http://kubernetes.io/docs/user-guide/services/#type-nodeport" target="_blank"&gt;NodePort service type&lt;/a&gt; which we will expose via Minikube in the next paragraph&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Save it somewhere on the disk and execute 'kubectl create' command: &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/a7b0755cc2d2895af2ed94eac3ff6aa7.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Exposing the service port&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;One of the &lt;a href="https://github.com/kubernetes/minikube#known-issues" target="_blank"&gt;Minikube's limitations&lt;/a&gt; is that it can't use &lt;a href="http://kubernetes.io/docs/user-guide/ingress/" target="_blank"&gt;Ingress API&lt;/a&gt; and expose services to the outside world. Thankfully there's other way - use Node Port service type. With this simple trick we will be able to access the service using '&amp;lt;minikube_ip&amp;gt;:&amp;lt;node_port_number&amp;gt;'. The port number was specified in the yaml file (we could leave it blank and let Kubernetes assign random one). The node port can easily be checked using the following command:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/8633d507b16204ccf846999c466f1137.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;In order to obtain the Kubernetes node IP, use the following command: &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/d4a55b2942037aec1a978361a7a73818.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Testing the setup&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;Testing is quite simple and the only thing to remember is to use the proper address - &amp;lt;minikube_ip&amp;gt;:&amp;lt;node_port&amp;gt;:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/3c752b672c9d40a584dfe86e4bf3e054.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Clean up&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;Minikube has all-in-one command to do the clean up:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/2978234b72f4952feabd95d703174927.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Conclusion&lt;/h4&gt;&lt;div&gt;Kubernetes setup is almost identical to the OpenShift one but there are a couple of differences to keep in mind:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;OpenShift's DeploymentConfiguration is similar Kubernetes Deployment with ReplicaSets&lt;/li&gt;&lt;li&gt;OpenShift's Services work the same way as in Kubernetes&lt;/li&gt;&lt;li&gt;OpenShift's Routes are similar to Kubernetes' Ingresses&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Happy scaling and don't forget to check if Infinispan formed a cluster (hint - look into the &lt;a href="http://blog.infinispan.org/2016/08/running-infinispan-cluster-on-openshift.html" target="_blank"&gt;previous post&lt;/a&gt;).&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/JgbPe7k8_jM" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://blog.infinispan.org/feeds/6707507324892990682/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://blog.infinispan.org/2016/08/running-infinispan-cluster-on-kubernetes.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6707507324892990682" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5717179571414330874/posts/default/6707507324892990682" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/Infinispan/~3/JgbPe7k8_jM/running-infinispan-cluster-on-kubernetes.html" title="Running Infinispan cluster on Kubernetes" /><author><name>Sebastian Łaskawiec</name><uri>http://www.blogger.com/profile/04646966686358157697</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//3.bp.blogspot.com/-VNPyDBdySyM/V481yab0AhI/AAAAAAAAG7s/aVocbe6K90YzbSydG07BW12tSGUvYYU6gCK4B/s113/a0e07b17b42ff06c0c722d2ad5bd8ed3%253Fs%253D256" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-SxPVOKzEEH8/V62_FFizzhI/AAAAAAAAHI8/ARH6rBWLOtwwibGis3djKZk9vCDAvFipgCLcB/s72-c/Infinispan%2B%252B%2BKubernetes.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://blog.infinispan.org/2016/08/running-infinispan-cluster-on-kubernetes.html</feedburner:origLink></entry></feed>
